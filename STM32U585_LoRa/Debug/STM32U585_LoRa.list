
STM32U585_LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a1  08001a70  08001a70  00002a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b14  08001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001b18  08001b18  00002b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  20000000  08001b1c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000180  20000060  08001b7c  00003060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e0  08001b7c  000031e0  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
  9 .debug_line   00000fd8  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 000000cb  00000000  00000000  0000406e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000007c7  00000000  00000000  00004139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000002b0  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000140  00000000  00000000  00004bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000e24a6  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006f  00000000  00000000  000e7196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d44  00000000  00000000  000e7205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0010df49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000008b8  00000000  00000000  0010df8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000060 	.word	0x20000060
 8000254:	00000000 	.word	0x00000000
 8000258:	08001a58 	.word	0x08001a58

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000064 	.word	0x20000064
 8000274:	08001a58 	.word	0x08001a58

08000278 <GPIOE_MODER_Set_Alt_Function>:
#PE15-SPI1_MOSI

GPIOE_MODER_Set_Alt_Function:
	//PE11 PE12, PE13, PE14, PE15
	//MODER bits = 10: Alternate function mode
	LDR		R1, =GPIOE_BASE_ADDR
 8000278:	49aa      	ldr	r1, [pc, #680]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_MODER_OFFSET
 800027a:	f04f 0200 	mov.w	r2, #0
	ADDS	R1,	R2
 800027e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000280:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 8000282:	2203      	movs	r2, #3
	LSLS	R3, R2, #22	//PE11
 8000284:	0593      	lsls	r3, r2, #22
	MVNS	R3,	R3
 8000286:	43db      	mvns	r3, r3
	ANDS	R0, R3		//clear bits
 8000288:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 800028a:	2202      	movs	r2, #2
	LSLS	R3, R2, #22
 800028c:	0593      	lsls	r3, r2, #22
	ORRS	R0, R3
 800028e:	4318      	orrs	r0, r3
	MOVS	R2, 0x3
 8000290:	2203      	movs	r2, #3
	LSLS	R3, R2, #24	//PE12
 8000292:	0613      	lsls	r3, r2, #24
	MVNS	R3,	R3
 8000294:	43db      	mvns	r3, r3
	ANDS	R0, R3		//clear bits
 8000296:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 8000298:	2202      	movs	r2, #2
	LSLS	R3, R2, #24
 800029a:	0613      	lsls	r3, r2, #24
	ORRS	R0, R3
 800029c:	4318      	orrs	r0, r3
	MOVS	R2, 0x3
 800029e:	2203      	movs	r2, #3
	LSLS	R3, R2, #26	//PE13
 80002a0:	0693      	lsls	r3, r2, #26
	MVNS	R3,	R3
 80002a2:	43db      	mvns	r3, r3
	ANDS	R0, R3		//clear bits
 80002a4:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 80002a6:	2202      	movs	r2, #2
	LSLS	R3, R2, #26
 80002a8:	0693      	lsls	r3, r2, #26
	ORRS	R0, R3
 80002aa:	4318      	orrs	r0, r3
	MOVS	R2, 0x3
 80002ac:	2203      	movs	r2, #3
	LSLS	R3, R2, #28	//PE14
 80002ae:	0713      	lsls	r3, r2, #28
	MVNS	R3,	R3
 80002b0:	43db      	mvns	r3, r3
	ANDS	R0, R3		//clear bits
 80002b2:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 80002b4:	2202      	movs	r2, #2
	LSLS	R3, R2, #28
 80002b6:	0713      	lsls	r3, r2, #28
	ORRS	R0, R3
 80002b8:	4318      	orrs	r0, r3
	MOVS	R2, 0x3
 80002ba:	2203      	movs	r2, #3
	LSLS	R3, R2, #30	//PE15
 80002bc:	0793      	lsls	r3, r2, #30
	MVNS	R3,	R3
 80002be:	43db      	mvns	r3, r3
	ANDS	R0, R3		//clear bits
 80002c0:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 80002c2:	2202      	movs	r2, #2
	LSLS	R3, R2, #30
 80002c4:	0793      	lsls	r3, r2, #30
	ORRS	R0, R3
 80002c6:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80002c8:	6008      	str	r0, [r1, #0]
	BX LR
 80002ca:	4770      	bx	lr

080002cc <GPIOE_AFRH_Set_Alt_Function>:
#PE14-SPI1_MISO
#PE15-SPI1_MOSI

GPIOE_AFRH_Set_Alt_Function:
	//0101: AF5 12,16,20,24,28
	LDR		R1, =GPIOE_BASE_ADDR
 80002cc:	4995      	ldr	r1, [pc, #596]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_AFRH_OFFSET
 80002ce:	f04f 0224 	mov.w	r2, #36	@ 0x24
	ADDS	R1,	R2
 80002d2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80002d4:	6808      	ldr	r0, [r1, #0]
	#12
	MOVS	R2, 0xF
 80002d6:	220f      	movs	r2, #15
	LSLS	R2, #12
 80002d8:	0312      	lsls	r2, r2, #12
	MVNS	R2,	R2
 80002da:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80002dc:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 80002de:	2205      	movs	r2, #5
	LSLS	R2, #12
 80002e0:	0312      	lsls	r2, r2, #12
	ORRS	R0, R2
 80002e2:	4310      	orrs	r0, r2
	#16
	MOVS	R2, 0xF
 80002e4:	220f      	movs	r2, #15
	LSLS	R2, #16
 80002e6:	0412      	lsls	r2, r2, #16
	MVNS	R2,	R2
 80002e8:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80002ea:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 80002ec:	2205      	movs	r2, #5
	LSLS	R2, #16
 80002ee:	0412      	lsls	r2, r2, #16
	ORRS	R0, R2
 80002f0:	4310      	orrs	r0, r2
	#20
	MOVS	R2, 0xF
 80002f2:	220f      	movs	r2, #15
	LSLS	R2, #20
 80002f4:	0512      	lsls	r2, r2, #20
	MVNS	R2,	R2
 80002f6:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80002f8:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 80002fa:	2205      	movs	r2, #5
	LSLS	R2, #20
 80002fc:	0512      	lsls	r2, r2, #20
	ORRS	R0, R2
 80002fe:	4310      	orrs	r0, r2
	#24
	MOVS	R2, 0xF
 8000300:	220f      	movs	r2, #15
	LSLS	R2, #24
 8000302:	0612      	lsls	r2, r2, #24
	MVNS	R2,	R2
 8000304:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000306:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 8000308:	2205      	movs	r2, #5
	LSLS	R2, #24
 800030a:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 800030c:	4310      	orrs	r0, r2
	#28
	MOVS	R2, 0xF
 800030e:	220f      	movs	r2, #15
	LSLS	R2, #28
 8000310:	0712      	lsls	r2, r2, #28
	MVNS	R2,	R2
 8000312:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000314:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 8000316:	2205      	movs	r2, #5
	LSLS	R2, #28
 8000318:	0712      	lsls	r2, r2, #28
	ORRS	R0, R2
 800031a:	4310      	orrs	r0, r2
	STR		R0,	[R1]
 800031c:	6008      	str	r0, [r1, #0]
	BX LR
 800031e:	4770      	bx	lr

08000320 <GPIOE_OSPEEDR_Set>:

GPIOE_OSPEEDR_Set:
	LDR		R1, =GPIOE_BASE_ADDR
 8000320:	4980      	ldr	r1, [pc, #512]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_OSPEEDR_OFFSET
 8000322:	f04f 0208 	mov.w	r2, #8
	ADDS	R1,	R2
 8000326:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000328:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3 //11 high-speed
 800032a:	2203      	movs	r2, #3
	LSLS	R3, R2, #22
 800032c:	0593      	lsls	r3, r2, #22
	ORRS	R0, R3
 800032e:	4318      	orrs	r0, r3
	LSLS	R3, R2, #24
 8000330:	0613      	lsls	r3, r2, #24
	ORRS	R0, R3
 8000332:	4318      	orrs	r0, r3
	LSLS	R3, R2, #26
 8000334:	0693      	lsls	r3, r2, #26
	ORRS	R0, R3
 8000336:	4318      	orrs	r0, r3
	LSLS	R3, R2, #28
 8000338:	0713      	lsls	r3, r2, #28
	ORRS	R0, R3
 800033a:	4318      	orrs	r0, r3
	LSLS	R3, R2, #30
 800033c:	0793      	lsls	r3, r2, #30
	ORRS	R0, R3
 800033e:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000340:	6008      	str	r0, [r1, #0]
	BX LR
 8000342:	4770      	bx	lr

08000344 <GPIOE_PUPDR_Set>:
#PE15-SPI1_MOSI
//00: No pull-up, pull-down
//01: Pull-up
//10: Pull-down
GPIOE_PUPDR_Set:
	LDR		R1, =GPIOE_BASE_ADDR
 8000344:	4977      	ldr	r1, [pc, #476]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000346:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 800034a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800034c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2 //10: Pull-down
 800034e:	2202      	movs	r2, #2
	LSLS	R3, R2, #24 //NSS
 8000350:	0613      	lsls	r3, r2, #24
	ORRS	R0, R3
 8000352:	4318      	orrs	r0, r3
	MOVS	R2, 0x3 //00: Pull-down
 8000354:	2203      	movs	r2, #3
	LSLS	R3, R2, #22 //RDY
 8000356:	0593      	lsls	r3, r2, #22
	MVNS	R3, R3
 8000358:	43db      	mvns	r3, r3
	ANDS	R0, R3
 800035a:	4018      	ands	r0, r3
	LSLS	R3, R2, #26 //SCK
 800035c:	0693      	lsls	r3, r2, #26
	MVNS	R3, R3
 800035e:	43db      	mvns	r3, r3
	ANDS	R0, R3
 8000360:	4018      	ands	r0, r3
	LSLS	R3, R2, #28 //MISO
 8000362:	0713      	lsls	r3, r2, #28
	MVNS	R3, R3
 8000364:	43db      	mvns	r3, r3
	ANDS	R0, R3
 8000366:	4018      	ands	r0, r3
	LSLS	R3, R2, #30 //MOSI
 8000368:	0793      	lsls	r3, r2, #30
	MVNS	R3, R3
 800036a:	43db      	mvns	r3, r3
	ANDS	R0, R3
 800036c:	4018      	ands	r0, r3
	STR		R0,	[R1]
 800036e:	6008      	str	r0, [r1, #0]
	BX LR
 8000370:	4770      	bx	lr

08000372 <GPIOE_PUPDR_RDY_DOWN>:
#PE15-SPI1_MOSI
//00: No pull-up, pull-down
//01: Pull-up
//10: Pull-down
GPIOE_PUPDR_RDY_DOWN:
	LDR		R1, =GPIOE_BASE_ADDR
 8000372:	496c      	ldr	r1, [pc, #432]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000374:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 8000378:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800037a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2
 800037c:	2202      	movs	r2, #2
	LSLS	R3, R2, #22 //RDY
 800037e:	0593      	lsls	r3, r2, #22
	ORRS	R0, R3
 8000380:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000382:	6008      	str	r0, [r1, #0]
	BX LR
 8000384:	4770      	bx	lr

08000386 <GPIOE_PUPDR_RDY_UP>:

GPIOE_PUPDR_RDY_UP:
	LDR		R1, =GPIOE_BASE_ADDR
 8000386:	4967      	ldr	r1, [pc, #412]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000388:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 800038c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800038e:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000390:	2201      	movs	r2, #1
	LSLS	R3, R2, #22 //RDY
 8000392:	0593      	lsls	r3, r2, #22
	ORRS	R0, R3
 8000394:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000396:	6008      	str	r0, [r1, #0]
	BX LR
 8000398:	4770      	bx	lr

0800039a <GPIOE_PUPDR_NSS_DOWN>:

GPIOE_PUPDR_NSS_DOWN:
	LDR		R1, =GPIOE_BASE_ADDR
 800039a:	4962      	ldr	r1, [pc, #392]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 800039c:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 80003a0:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80003a2:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2
 80003a4:	2202      	movs	r2, #2
	LSLS	R3, R2, #24 //NSS
 80003a6:	0613      	lsls	r3, r2, #24
	ORRS	R0, R3
 80003a8:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80003aa:	6008      	str	r0, [r1, #0]
	BX LR
 80003ac:	4770      	bx	lr

080003ae <GPIOE_PUPDR_NSS_UP>:

GPIOE_PUPDR_NSS_UP:
	LDR		R1, =GPIOE_BASE_ADDR
 80003ae:	495d      	ldr	r1, [pc, #372]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 80003b0:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 80003b4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80003b6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80003b8:	2201      	movs	r2, #1
	LSLS	R3, R2, #24 //NSS
 80003ba:	0613      	lsls	r3, r2, #24
	ORRS	R0, R3
 80003bc:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80003be:	6008      	str	r0, [r1, #0]
	BX LR
 80003c0:	4770      	bx	lr

080003c2 <GPIOE_PUPDR_SCK_DOWN>:

GPIOE_PUPDR_SCK_DOWN:
	LDR		R1, =GPIOE_BASE_ADDR
 80003c2:	4958      	ldr	r1, [pc, #352]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 80003c4:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 80003c8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80003ca:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2
 80003cc:	2202      	movs	r2, #2
	LSLS	R3, R2, #26 //SCK
 80003ce:	0693      	lsls	r3, r2, #26
	ORRS	R0, R3
 80003d0:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80003d2:	6008      	str	r0, [r1, #0]
	BX LR
 80003d4:	4770      	bx	lr

080003d6 <GPIOE_PUPDR_SCK_UP>:

GPIOE_PUPDR_SCK_UP:
	LDR		R1, =GPIOE_BASE_ADDR
 80003d6:	4953      	ldr	r1, [pc, #332]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 80003d8:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 80003dc:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80003de:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80003e0:	2201      	movs	r2, #1
	LSLS	R3, R2, #26 //SCK
 80003e2:	0693      	lsls	r3, r2, #26
	ORRS	R0, R3
 80003e4:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80003e6:	6008      	str	r0, [r1, #0]
	BX LR
 80003e8:	4770      	bx	lr

080003ea <GPIOE_PUPDR_MISO_DOWN>:

GPIOE_PUPDR_MISO_DOWN:
	LDR		R1, =GPIOE_BASE_ADDR
 80003ea:	494e      	ldr	r1, [pc, #312]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 80003ec:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 80003f0:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80003f2:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2
 80003f4:	2202      	movs	r2, #2
	LSLS	R3, R2, #28 //MISO
 80003f6:	0713      	lsls	r3, r2, #28
	ORRS	R0, R3
 80003f8:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 80003fa:	6008      	str	r0, [r1, #0]
	BX LR
 80003fc:	4770      	bx	lr

080003fe <GPIOE_PUPDR_MISO_UP>:

GPIOE_PUPDR_MISO_UP:
	LDR		R1, =GPIOE_BASE_ADDR
 80003fe:	4949      	ldr	r1, [pc, #292]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000400:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 8000404:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000406:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000408:	2201      	movs	r2, #1
	LSLS	R3, R2, #28 //MISO
 800040a:	0713      	lsls	r3, r2, #28
	ORRS	R0, R3
 800040c:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 800040e:	6008      	str	r0, [r1, #0]
	BX LR
 8000410:	4770      	bx	lr

08000412 <GPIOE_PUPDR_MOSI_DOWN>:

GPIOE_PUPDR_MOSI_DOWN:
	LDR		R1, =GPIOE_BASE_ADDR
 8000412:	4944      	ldr	r1, [pc, #272]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000414:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 8000418:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800041a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x2
 800041c:	2202      	movs	r2, #2
	LSLS	R3, R2, #30 //MOSI
 800041e:	0793      	lsls	r3, r2, #30
	ORRS	R0, R3
 8000420:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000422:	6008      	str	r0, [r1, #0]
	BX LR
 8000424:	4770      	bx	lr

08000426 <GPIOE_PUPDR_MOSI_UP>:

GPIOE_PUPDR_MOSI_UP:
	LDR		R1, =GPIOE_BASE_ADDR
 8000426:	493f      	ldr	r1, [pc, #252]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 8000428:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 800042c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800042e:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000430:	2201      	movs	r2, #1
	LSLS	R3, R2, #30 //MOSI
 8000432:	0793      	lsls	r3, r2, #30
	ORRS	R0, R3
 8000434:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000436:	6008      	str	r0, [r1, #0]
	BX LR
 8000438:	4770      	bx	lr

0800043a <GPIOE_PUPDR_CLEAR>:

GPIOE_PUPDR_CLEAR:
	LDR		R1, =GPIOE_BASE_ADDR
 800043a:	493a      	ldr	r1, [pc, #232]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_PUPDR_OFFSET
 800043c:	f04f 020c 	mov.w	r2, #12
	ADDS	R1,	R2
 8000440:	1889      	adds	r1, r1, r2
	LDR		R3, [R1]
 8000442:	680b      	ldr	r3, [r1, #0]
	MOVS	R2, 0x3 //00: Pull-down
 8000444:	2203      	movs	r2, #3
	LSLS	R4, R2, R0 //RDY
 8000446:	fa12 f400 	lsls.w	r4, r2, r0
	MVNS	R4, R4
 800044a:	43e4      	mvns	r4, r4
	ANDS	R3, R4
 800044c:	4023      	ands	r3, r4
	STR		R3,	[R1]
 800044e:	600b      	str	r3, [r1, #0]
	BX LR
 8000450:	4770      	bx	lr

08000452 <GPIOA_MODER_Set_Alt_Function>:
//GPIOA

GPIOA_MODER_Set_Alt_Function:
	// Pin PA8 for MCO clock interrupt
	//MODER bits = 10: Alternate function mode
	LDR		R1, =GPIOA_BASE_ADDR
 8000452:	4935      	ldr	r1, [pc, #212]	@ (8000528 <GPIOD_IDR_DIO_GET+0x12>)
	LDR		R2, =GPIOx_MODER_OFFSET
 8000454:	f04f 0200 	mov.w	r2, #0
	ADDS	R1,	R2
 8000458:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800045a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 800045c:	2203      	movs	r2, #3
	LSLS	R3, R2, #16 //PA8
 800045e:	0413      	lsls	r3, r2, #16
	MVNS	R3,	R3
 8000460:	43db      	mvns	r3, r3
	ANDS	R0, R3	//clear bits
 8000462:	4018      	ands	r0, r3
	MOVS	R2, 0x2
 8000464:	2202      	movs	r2, #2
	LSLS	R3, R2, #16
 8000466:	0413      	lsls	r3, r2, #16
	ORRS	R0, R3
 8000468:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 800046a:	6008      	str	r0, [r1, #0]
	BX LR
 800046c:	4770      	bx	lr

0800046e <GPIOA_AFRH_Set_Alt_Function>:

***********************************************/
GPIOA_AFRH_Set_Alt_Function:
	//AF0 (MCO): PA8
	//0000: AF0
	LDR		R1, =GPIOE_BASE_ADDR
 800046e:	492d      	ldr	r1, [pc, #180]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR		R2, =GPIOx_AFRH_OFFSET
 8000470:	f04f 0224 	mov.w	r2, #36	@ 0x24
	ADDS	R1,	R2
 8000474:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000476:	6808      	ldr	r0, [r1, #0]
	#PA8
	MOVS	R2, 0xF
 8000478:	220f      	movs	r2, #15
	MVNS	R2,	R2
 800047a:	43d2      	mvns	r2, r2
	ANDS	R0, R2  //clear bits
 800047c:	4010      	ands	r0, r2
	STR		R0,	[R1]
 800047e:	6008      	str	r0, [r1, #0]
	BX LR
 8000480:	4770      	bx	lr

08000482 <GPIOA_OSPEEDR_Set>:

GPIOA_OSPEEDR_Set:
	LDR		R1, =GPIOA_BASE_ADDR
 8000482:	4929      	ldr	r1, [pc, #164]	@ (8000528 <GPIOD_IDR_DIO_GET+0x12>)
	LDR		R2, =GPIOx_OSPEEDR_OFFSET
 8000484:	f04f 0208 	mov.w	r2, #8
	ADDS	R1,	R2
 8000488:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800048a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3 //11 high-speed
 800048c:	2203      	movs	r2, #3
	LSLS	R3, R2, #16
 800048e:	0413      	lsls	r3, r2, #16
	ORRS	R0, R3
 8000490:	4318      	orrs	r0, r3
	STR		R0,	[R1]
 8000492:	6008      	str	r0, [r1, #0]
	BX LR
 8000494:	4770      	bx	lr

08000496 <GPIOE_MODER_BUSY_INPUT>:
.equ GPIOx_BSRR_OFFSET,		0x18U
.equ GPIOx_AFRL_OFFSET,		0x20U
.equ GPIOx_AFRH_OFFSET,		0x24U

GPIOE_MODER_BUSY_INPUT: //PE7
	LDR 	R1, =GPIOE_BASE_ADDR
 8000496:	4923      	ldr	r1, [pc, #140]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR 	R2, =GPIOx_MODER_OFFSET
 8000498:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 800049c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800049e:	6808      	ldr	r0, [r1, #0]
	MOVS 	R2, 0x3
 80004a0:	2203      	movs	r2, #3
	LSLS	R2, #14
 80004a2:	0392      	lsls	r2, r2, #14
	MVNS	R2, R2
 80004a4:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80004a6:	4010      	ands	r0, r2
	STR		R0, [R1]
 80004a8:	6008      	str	r0, [r1, #0]
	BX LR
 80004aa:	4770      	bx	lr

080004ac <GPIOE_PURDR_BUSY_NPUPD>:


GPIOE_PURDR_BUSY_NPUPD: //PE7
	LDR R1, =GPIOE_BASE_ADDR
 80004ac:	491d      	ldr	r1, [pc, #116]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR R2, =GPIOx_PUPDR_OFFSET
 80004ae:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80004b2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80004b4:	6808      	ldr	r0, [r1, #0]
	MOVS 	R2, 0x3
 80004b6:	2203      	movs	r2, #3
	LSLS	R2, #14
 80004b8:	0392      	lsls	r2, r2, #14
	MVNS	R2, R2
 80004ba:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80004bc:	4010      	ands	r0, r2
	STR		R0, [R1]
 80004be:	6008      	str	r0, [r1, #0]
	BX LR
 80004c0:	4770      	bx	lr

080004c2 <GPIOE_PURDR_BUSY_UP>:

GPIOE_PURDR_BUSY_UP: //PE7
	LDR R1, =GPIOE_BASE_ADDR
 80004c2:	4918      	ldr	r1, [pc, #96]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR R2, =GPIOx_PUPDR_OFFSET
 80004c4:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80004c8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80004ca:	6808      	ldr	r0, [r1, #0]
	MOVS 	R2, 0x3
 80004cc:	2203      	movs	r2, #3
	LSLS	R2, #14
 80004ce:	0392      	lsls	r2, r2, #14
	MVNS	R2, R2
 80004d0:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80004d2:	4010      	ands	r0, r2
	MOVS 	R2, 0x1
 80004d4:	2201      	movs	r2, #1
	LSLS	R2, #14
 80004d6:	0392      	lsls	r2, r2, #14
	ORRS	R0, R2
 80004d8:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80004da:	6008      	str	r0, [r1, #0]
	BX LR
 80004dc:	4770      	bx	lr

080004de <GPIOE_IDR_BUSY_GET>:

GPIOE_IDR_BUSY_GET: //PE7
	LDR R1, =GPIOE_BASE_ADDR
 80004de:	4911      	ldr	r1, [pc, #68]	@ (8000524 <GPIOD_IDR_DIO_GET+0xe>)
	LDR R2, =GPIOx_IDR_OFFSET
 80004e0:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 80004e4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80004e6:	6808      	ldr	r0, [r1, #0]
	BX LR
 80004e8:	4770      	bx	lr

080004ea <GPIOD_MODER_DIO_INPUT>:

GPIOD_MODER_DIO_INPUT: //PD15
	LDR R1, =GPIOD_BASE_ADDR
 80004ea:	4910      	ldr	r1, [pc, #64]	@ (800052c <GPIOD_IDR_DIO_GET+0x16>)
	LDR R2, =GPIOx_MODER_OFFSET
 80004ec:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 80004f0:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80004f2:	6808      	ldr	r0, [r1, #0]
	MOVS 	R2, 0x3
 80004f4:	2203      	movs	r2, #3
	LSLS	R2, #30
 80004f6:	0792      	lsls	r2, r2, #30
	MVNS	R2, R2
 80004f8:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80004fa:	4010      	ands	r0, r2
	STR		R0, [R1]
 80004fc:	6008      	str	r0, [r1, #0]
	BX LR
 80004fe:	4770      	bx	lr

08000500 <GPIOD_PUPDR_DIO_NPUPD>:

GPIOD_PUPDR_DIO_NPUPD: //PD15
	LDR R1, =GPIOD_BASE_ADDR
 8000500:	490a      	ldr	r1, [pc, #40]	@ (800052c <GPIOD_IDR_DIO_GET+0x16>)
	LDR R2, =GPIOx_PUPDR_OFFSET
 8000502:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000506:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000508:	6808      	ldr	r0, [r1, #0]
	MOVS 	R2, 0x3
 800050a:	2203      	movs	r2, #3
	LSLS	R2, #30
 800050c:	0792      	lsls	r2, r2, #30
	MVNS	R2, R2
 800050e:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000510:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000512:	6008      	str	r0, [r1, #0]
	BX LR
 8000514:	4770      	bx	lr

08000516 <GPIOD_IDR_DIO_GET>:

GPIOD_IDR_DIO_GET: //PD15
	LDR R1, =GPIOD_BASE_ADDR
 8000516:	4905      	ldr	r1, [pc, #20]	@ (800052c <GPIOD_IDR_DIO_GET+0x16>)
	LDR R2, =GPIOx_IDR_OFFSET
 8000518:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 800051c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800051e:	6808      	ldr	r0, [r1, #0]
	BX LR
 8000520:	4770      	bx	lr
 8000522:	0000      	.short	0x0000
	LDR		R1, =GPIOE_BASE_ADDR
 8000524:	42021000 	.word	0x42021000
	LDR		R1, =GPIOA_BASE_ADDR
 8000528:	42020000 	.word	0x42020000
	LDR R1, =GPIOD_BASE_ADDR
 800052c:	42020c00 	.word	0x42020c00

08000530 <NVIC_TIM8_Enable_Interupt>:



//position 52 TIM8 update  0x00000110
NVIC_TIM8_Enable_Interupt:
	LDR		R1, =NVIC_TIM8
 8000530:	4906      	ldr	r1, [pc, #24]	@ (800054c <NVIC_SPI1_Enable_Interupt+0xe>)
	LDR		R0, [R1]
 8000532:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000534:	2201      	movs	r2, #1
	LSLS	R2, NVIC_TIM8_PIN
 8000536:	0512      	lsls	r2, r2, #20
	ORRS	R0, R2
 8000538:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800053a:	6008      	str	r0, [r1, #0]
	BX LR
 800053c:	4770      	bx	lr

0800053e <NVIC_SPI1_Enable_Interupt>:

NVIC_SPI1_Enable_Interupt:
	LDR		R1, =NVIC_SPI1
 800053e:	4903      	ldr	r1, [pc, #12]	@ (800054c <NVIC_SPI1_Enable_Interupt+0xe>)
	LDR		R0, [R1]
 8000540:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000542:	2201      	movs	r2, #1
	LSLS	R2, NVIC_SPI1_PIN
 8000544:	06d2      	lsls	r2, r2, #27
	ORRS	R0, R2
 8000546:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000548:	6008      	str	r0, [r1, #0]
	BX LR
 800054a:	4770      	bx	lr
	LDR		R1, =NVIC_TIM8
 800054c:	e000e104 	.word	0xe000e104

08000550 <ASM_RCC_APB2ENR_TIM8EN_Set>:




ASM_RCC_APB2ENR_TIM8EN_Set:
	LDR		R1, =RCC_BASE_ADDR
 8000550:	49d4      	ldr	r1, [pc, #848]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_APB2ENR_OFFSET
 8000552:	f04f 02a4 	mov.w	r2, #164	@ 0xa4
	ADDS	R1, R2
 8000556:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000558:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 800055a:	2201      	movs	r2, #1
	LSLS	R2, #13
 800055c:	0352      	lsls	r2, r2, #13
	ORRS	R0, R2
 800055e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000560:	6008      	str	r0, [r1, #0]
	BX LR
 8000562:	4770      	bx	lr

08000564 <ASM_RCC_AHB2ENR1_GPIOEEN_Set>:

ASM_RCC_AHB2ENR1_GPIOEEN_Set:
	//enable clock on GPIOE
	LDR		R1, =RCC_BASE_ADDR
 8000564:	49cf      	ldr	r1, [pc, #828]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_AHB2ENR1_OFFSET
 8000566:	f04f 028c 	mov.w	r2, #140	@ 0x8c
	ADDS	R1, R2
 800056a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800056c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800056e:	2201      	movs	r2, #1
	LSLS	R2, #4 //Bit 4 GPIOEEN: I/O port E clock enable
 8000570:	0112      	lsls	r2, r2, #4
	ORRS	R0, R2
 8000572:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000574:	6008      	str	r0, [r1, #0]
	BX LR
 8000576:	4770      	bx	lr

08000578 <ASM_RCC_AHB2ENR1_GPIOAEN_Set>:

ASM_RCC_AHB2ENR1_GPIOAEN_Set:
	//enable clock on GPIOH
	LDR		R1, =RCC_BASE_ADDR
 8000578:	49ca      	ldr	r1, [pc, #808]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_AHB2ENR1_OFFSET
 800057a:	f04f 028c 	mov.w	r2, #140	@ 0x8c
	ADDS	R1, R2
 800057e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000580:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000582:	2201      	movs	r2, #1
	//Bit 1 GPIOAEN: I/O port A clock enable
	ORRS	R0, R2
 8000584:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000586:	6008      	str	r0, [r1, #0]
	BX LR
 8000588:	4770      	bx	lr

0800058a <ASM_RCC_AHB2ENR1_GPIODEN_Set>:

ASM_RCC_AHB2ENR1_GPIODEN_Set:
	//enable clock on GPIOD
	LDR		R1, =RCC_BASE_ADDR
 800058a:	49c6      	ldr	r1, [pc, #792]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_AHB2ENR1_OFFSET
 800058c:	f04f 028c 	mov.w	r2, #140	@ 0x8c
	ADDS	R1, R2
 8000590:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000592:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000594:	2201      	movs	r2, #1
	LSLS	R2, #3 //Bit 3 GPIODEN: I/O port D clock enable
 8000596:	00d2      	lsls	r2, r2, #3
	ORRS	R0, R2
 8000598:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800059a:	6008      	str	r0, [r1, #0]
	BX LR
 800059c:	4770      	bx	lr

0800059e <ASM_RCC_APB2ENR_SPI1_Set>:

ASM_RCC_APB2ENR_SPI1_Set:
	//Bit 12 SPI1EN: SPI1 clock enable
	LDR		R1, =RCC_BASE_ADDR
 800059e:	49c1      	ldr	r1, [pc, #772]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_APB2ENR_OFFSET
 80005a0:	f04f 02a4 	mov.w	r2, #164	@ 0xa4
	ADDS	R1, R2
 80005a4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80005a6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80005a8:	2201      	movs	r2, #1
	LSLS	R2, #12
 80005aa:	0312      	lsls	r2, r2, #12
	ORRS	R0, R2
 80005ac:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80005ae:	6008      	str	r0, [r1, #0]
	BX LR
 80005b0:	4770      	bx	lr

080005b2 <ASM_RCC_CCIPR1_SPI1SEL_HSI16>:
//10: HSI16 selected
//11: MSIK selected
//Note: The SPI1 is functional in Stop 0 and Stop 1 mode only when the kernel clock is HSI16 or
//MSIK.
ASM_RCC_CCIPR1_SPI1SEL_HSI16:
	LDR		R1, =RCC_BASE_ADDR
 80005b2:	49bc      	ldr	r1, [pc, #752]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CCIPR1_OFFSET
 80005b4:	f04f 02e0 	mov.w	r2, #224	@ 0xe0
	ADDS	R1, R2
 80005b8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80005ba:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 80005bc:	2203      	movs	r2, #3
	LSLS	R2, #20
 80005be:	0512      	lsls	r2, r2, #20
	MVNS	R2, R2
 80005c0:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80005c2:	4010      	ands	r0, r2
	MOVS	R2, 0x2
 80005c4:	2202      	movs	r2, #2
	LSLS	R2, #20
 80005c6:	0512      	lsls	r2, r2, #20
	ORRS	R0, R2
 80005c8:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80005ca:	6008      	str	r0, [r1, #0]
	BX LR
 80005cc:	4770      	bx	lr

080005ce <ASM_RCC_CCIPR1_SPI1SEL_PCLK2>:

ASM_RCC_CCIPR1_SPI1SEL_PCLK2:
	LDR		R1, =RCC_BASE_ADDR
 80005ce:	49b5      	ldr	r1, [pc, #724]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CCIPR1_OFFSET
 80005d0:	f04f 02e0 	mov.w	r2, #224	@ 0xe0
	ADDS	R1, R2
 80005d4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80005d6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 80005d8:	2203      	movs	r2, #3
	LSLS	R2, #20
 80005da:	0512      	lsls	r2, r2, #20
	MVNS	R2, R2
 80005dc:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80005de:	4010      	ands	r0, r2
	STR		R0, [R1]
 80005e0:	6008      	str	r0, [r1, #0]
	BX LR
 80005e2:	4770      	bx	lr

080005e4 <ASM_RCC_CCIPR1_SPI1SEL_SYSCLK>:

ASM_RCC_CCIPR1_SPI1SEL_SYSCLK:
	LDR		R1, =RCC_BASE_ADDR
 80005e4:	49af      	ldr	r1, [pc, #700]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CCIPR1_OFFSET
 80005e6:	f04f 02e0 	mov.w	r2, #224	@ 0xe0
	ADDS	R1, R2
 80005ea:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80005ec:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 80005ee:	2203      	movs	r2, #3
	LSLS	R2, #20
 80005f0:	0512      	lsls	r2, r2, #20
	MVNS	R2, R2
 80005f2:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80005f4:	4010      	ands	r0, r2
	MOVS	R2, 0x1
 80005f6:	2201      	movs	r2, #1
	LSLS	R2, #20
 80005f8:	0512      	lsls	r2, r2, #20
	ORRS	R0, R2
 80005fa:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80005fc:	6008      	str	r0, [r1, #0]
	BX LR
 80005fe:	4770      	bx	lr

08000600 <ASM_RCC_CFGR2_HPRE_2>:
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512
*/
ASM_RCC_CFGR2_HPRE_2:
	LDR		R1, =RCC_BASE_ADDR
 8000600:	49a8      	ldr	r1, [pc, #672]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR2_OFFSET
 8000602:	f04f 0220 	mov.w	r2, #32
	ADDS	R1, R2
 8000606:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000608:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 800060a:	220f      	movs	r2, #15
	MVNS	R2, R2
 800060c:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 800060e:	4010      	ands	r0, r2
	MOVS	R2, 0x8
 8000610:	2208      	movs	r2, #8
	ORRS	R0, R2
 8000612:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000614:	6008      	str	r0, [r1, #0]
	BX LR
 8000616:	4770      	bx	lr

08000618 <ASM_RCC_CFGR2_PCLK2_2>:
101: PCLK2 divided by 4
110: PCLK2 divided by 8
111: PCLK2 divided by 16
*/
ASM_RCC_CFGR2_PCLK2_2:
	LDR		R1, =RCC_BASE_ADDR
 8000618:	49a2      	ldr	r1, [pc, #648]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR2_OFFSET
 800061a:	f04f 0220 	mov.w	r2, #32
	ADDS	R1, R2
 800061e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000620:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x7
 8000622:	2207      	movs	r2, #7
	LSLS 	R2, #8
 8000624:	0212      	lsls	r2, r2, #8
	MVNS	R2, R2
 8000626:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 8000628:	4010      	ands	r0, r2
	MOVS	R2, 0x4
 800062a:	2204      	movs	r2, #4
	LSLS 	R2, #8
 800062c:	0212      	lsls	r2, r2, #8
	ORRS	R0, R2
 800062e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000630:	6008      	str	r0, [r1, #0]
	BX LR
 8000632:	4770      	bx	lr

08000634 <ASM_RCC_CFGR1_MCOSEL_HSI16>:
1000: Internal HSI48 clock selected
1001: MSIK clock selected
Others: reserved
*/
ASM_RCC_CFGR1_MCOSEL_HSI16:
	LDR		R1, =RCC_BASE_ADDR
 8000634:	499b      	ldr	r1, [pc, #620]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 8000636:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 800063a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800063c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 800063e:	220f      	movs	r2, #15
	LSLS 	R2, #24
 8000640:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 8000642:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 8000644:	4010      	ands	r0, r2
	MOVS	R2, 0x3
 8000646:	2203      	movs	r2, #3
	LSLS 	R2, #24
 8000648:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 800064a:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800064c:	6008      	str	r0, [r1, #0]
	BX LR
 800064e:	4770      	bx	lr

08000650 <ASM_RCC_CFGR1_MCOSEL_HSE>:

ASM_RCC_CFGR1_MCOSEL_HSE:
	LDR		R1, =RCC_BASE_ADDR
 8000650:	4994      	ldr	r1, [pc, #592]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 8000652:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 8000656:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000658:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 800065a:	220f      	movs	r2, #15
	LSLS 	R2, #24
 800065c:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 800065e:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 8000660:	4010      	ands	r0, r2
	MOVS	R2, 0x4
 8000662:	2204      	movs	r2, #4
	LSLS 	R2, #24
 8000664:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 8000666:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000668:	6008      	str	r0, [r1, #0]
	BX LR
 800066a:	4770      	bx	lr

0800066c <ASM_RCC_CFGR1_MCOSEL_MSIS>:

ASM_RCC_CFGR1_MCOSEL_MSIS:
	LDR		R1, =RCC_BASE_ADDR
 800066c:	498d      	ldr	r1, [pc, #564]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 800066e:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 8000672:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000674:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 8000676:	220f      	movs	r2, #15
	LSLS 	R2, #24
 8000678:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 800067a:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 800067c:	4010      	ands	r0, r2
	MOVS	R2, 0x2
 800067e:	2202      	movs	r2, #2
	LSLS 	R2, #24
 8000680:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 8000682:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000684:	6008      	str	r0, [r1, #0]
	BX LR
 8000686:	4770      	bx	lr

08000688 <ASM_RCC_CFGR1_MCOSEL_MSIK>:

ASM_RCC_CFGR1_MCOSEL_MSIK:
	LDR		R1, =RCC_BASE_ADDR
 8000688:	4986      	ldr	r1, [pc, #536]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 800068a:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 800068e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000690:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 8000692:	220f      	movs	r2, #15
	LSLS 	R2, #24
 8000694:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 8000696:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 8000698:	4010      	ands	r0, r2
	MOVS	R2, 0x9
 800069a:	2209      	movs	r2, #9
	LSLS 	R2, #24
 800069c:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 800069e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80006a0:	6008      	str	r0, [r1, #0]
	BX LR
 80006a2:	4770      	bx	lr

080006a4 <ASM_RCC_CFGR1_MCOSEL_SYSCLK>:

ASM_RCC_CFGR1_MCOSEL_SYSCLK:
	LDR		R1, =RCC_BASE_ADDR
 80006a4:	497f      	ldr	r1, [pc, #508]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 80006a6:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 80006aa:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80006ac:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 80006ae:	220f      	movs	r2, #15
	LSLS 	R2, #24
 80006b0:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 80006b2:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80006b4:	4010      	ands	r0, r2
	MOVS	R2, 0x1
 80006b6:	2201      	movs	r2, #1
	LSLS 	R2, #24
 80006b8:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 80006ba:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80006bc:	6008      	str	r0, [r1, #0]
	BX LR
 80006be:	4770      	bx	lr

080006c0 <ASM_RCC_CFGR1_MCOSEL_HSI48>:

ASM_RCC_CFGR1_MCOSEL_HSI48:
	LDR		R1, =RCC_BASE_ADDR
 80006c0:	4978      	ldr	r1, [pc, #480]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 80006c2:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 80006c6:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80006c8:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 80006ca:	220f      	movs	r2, #15
	LSLS 	R2, #24
 80006cc:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 80006ce:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80006d0:	4010      	ands	r0, r2
	MOVS	R2, 0x8
 80006d2:	2208      	movs	r2, #8
	LSLS 	R2, #24
 80006d4:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 80006d6:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80006d8:	6008      	str	r0, [r1, #0]
	BX LR
 80006da:	4770      	bx	lr

080006dc <RCC_CFGR1_MCOSEL_PLL1>:

RCC_CFGR1_MCOSEL_PLL1:
	LDR		R1, =RCC_BASE_ADDR
 80006dc:	4971      	ldr	r1, [pc, #452]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 80006de:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 80006e2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80006e4:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 80006e6:	220f      	movs	r2, #15
	LSLS 	R2, #24
 80006e8:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 80006ea:	43d2      	mvns	r2, r2
	ANDS	R0, R2	//clear bits
 80006ec:	4010      	ands	r0, r2
	MOVS	R2, 0x5
 80006ee:	2205      	movs	r2, #5
	LSLS 	R2, #24
 80006f0:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 80006f2:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80006f4:	6008      	str	r0, [r1, #0]
	BX LR
 80006f6:	4770      	bx	lr

080006f8 <ASM_RCC_CR_HSI16>:
indirectly as system clock.
0: HSI16 oscillator off
1: HSI16 oscillator on
*/
ASM_RCC_CR_HSI16:
	LDR		R1, =RCC_BASE_ADDR
 80006f8:	496a      	ldr	r1, [pc, #424]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 80006fa:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80006fc:	2201      	movs	r2, #1
	LSLS 	R2, #8
 80006fe:	0212      	lsls	r2, r2, #8
	ORRS	R0, R2
 8000700:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000702:	6008      	str	r0, [r1, #0]
	BX LR
 8000704:	4770      	bx	lr

08000706 <ASM_RCC_CR_HSI16RDY>:
0: HSI16 oscillator not ready
1: HSI16 oscillator ready
Note: Once the HSION bit is cleared, HSIRDY goes low after six HSI16 clock cycles.
*/
ASM_RCC_CR_HSI16RDY:
	LDR		R1, =RCC_BASE_ADDR
 8000706:	4967      	ldr	r1, [pc, #412]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000708:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800070a:	2201      	movs	r2, #1
	LSLS 	R2, #10
 800070c:	0292      	lsls	r2, r2, #10
	ANDS	R0, R2, R0
 800070e:	4010      	ands	r0, r2
	BX LR
 8000710:	4770      	bx	lr

08000712 <ASM_RCC_CR_HSI48>:


ASM_RCC_CR_HSI48:
	LDR		R1, =RCC_BASE_ADDR
 8000712:	4964      	ldr	r1, [pc, #400]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000714:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000716:	2201      	movs	r2, #1
	LSLS 	R2, #12
 8000718:	0312      	lsls	r2, r2, #12
	ORRS	R0, R2
 800071a:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800071c:	6008      	str	r0, [r1, #0]
	BX LR
 800071e:	4770      	bx	lr

08000720 <ASM_RCC_CR_HSI48RDY>:

ASM_RCC_CR_HSI48RDY:
	LDR		R1, =RCC_BASE_ADDR
 8000720:	4960      	ldr	r1, [pc, #384]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000722:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000724:	2201      	movs	r2, #1
	LSLS 	R2, #13
 8000726:	0352      	lsls	r2, r2, #13
	ANDS	R0, R2, R0
 8000728:	4010      	ands	r0, r2
	BX LR
 800072a:	4770      	bx	lr

0800072c <ASM_RCC_CR_SYSCLK>:

ASM_RCC_CR_SYSCLK:
	LDR		R1, =RCC_BASE_ADDR
 800072c:	495d      	ldr	r1, [pc, #372]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 800072e:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000730:	2201      	movs	r2, #1
	LSLS 	R2, #8
 8000732:	0212      	lsls	r2, r2, #8
	ORRS	R0, R2
 8000734:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000736:	6008      	str	r0, [r1, #0]
	BX LR
 8000738:	4770      	bx	lr

0800073a <ASM_RCC_CR_SYSCLKRDY>:

ASM_RCC_CR_SYSCLKRDY:
	LDR		R1, =RCC_BASE_ADDR
 800073a:	495a      	ldr	r1, [pc, #360]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 800073c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800073e:	2201      	movs	r2, #1
	LSLS 	R2, #10
 8000740:	0292      	lsls	r2, r2, #10
	ANDS	R0, R2, R0
 8000742:	4010      	ands	r0, r2
	BX LR
 8000744:	4770      	bx	lr

08000746 <ASM_RCC_CR_MSIK>:

ASM_RCC_CR_MSIK:
	LDR		R1, =RCC_BASE_ADDR
 8000746:	4957      	ldr	r1, [pc, #348]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000748:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800074a:	2201      	movs	r2, #1
	LSLS 	R2, #4
 800074c:	0112      	lsls	r2, r2, #4
	ORRS	R0, R2
 800074e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000750:	6008      	str	r0, [r1, #0]
	BX LR
 8000752:	4770      	bx	lr

08000754 <ASM_RCC_CR_MSIKRDY>:

ASM_RCC_CR_MSIKRDY:
	LDR		R1, =RCC_BASE_ADDR
 8000754:	4953      	ldr	r1, [pc, #332]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000756:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000758:	2201      	movs	r2, #1
	LSLS 	R2, #5
 800075a:	0152      	lsls	r2, r2, #5
	ANDS	R0, R2, R0
 800075c:	4010      	ands	r0, r2
	BX LR
 800075e:	4770      	bx	lr

08000760 <ASM_RCC_CR_MSIS>:

ASM_RCC_CR_MSIS:
	LDR		R1, =RCC_BASE_ADDR
 8000760:	4950      	ldr	r1, [pc, #320]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000762:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000764:	2201      	movs	r2, #1
	LSLS 	R2, #0
 8000766:	0012      	movs	r2, r2
	ORRS	R0, R2
 8000768:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800076a:	6008      	str	r0, [r1, #0]
	BX LR
 800076c:	4770      	bx	lr

0800076e <ASM_RCC_CR_MSISRDY>:

ASM_RCC_CR_MSISRDY:
	LDR		R1, =RCC_BASE_ADDR
 800076e:	494d      	ldr	r1, [pc, #308]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000770:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000772:	2201      	movs	r2, #1
	LSLS 	R2, #2
 8000774:	0092      	lsls	r2, r2, #2
	ANDS	R0, R2, R0
 8000776:	4010      	ands	r0, r2
	BX LR
 8000778:	4770      	bx	lr

0800077a <ASM_RCC_CR_HSE>:

ASM_RCC_CR_HSE:
	LDR		R1, =RCC_BASE_ADDR
 800077a:	494a      	ldr	r1, [pc, #296]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 800077c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800077e:	2201      	movs	r2, #1
	LSLS 	R2, #16
 8000780:	0412      	lsls	r2, r2, #16
	ORRS	R0, R2
 8000782:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000784:	6008      	str	r0, [r1, #0]
	BX LR
 8000786:	4770      	bx	lr

08000788 <ASM_RCC_CR_HSERDY>:

ASM_RCC_CR_HSERDY:
	LDR		R1, =RCC_BASE_ADDR
 8000788:	4946      	ldr	r1, [pc, #280]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 800078a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800078c:	2201      	movs	r2, #1
	LSLS 	R2, #17
 800078e:	0452      	lsls	r2, r2, #17
	ANDS	R0, R2, R0
 8000790:	4010      	ands	r0, r2
	BX LR
 8000792:	4770      	bx	lr

08000794 <ASM_RCC_CR_PLL1>:

ASM_RCC_CR_PLL1:
	LDR		R1, =RCC_BASE_ADDR
 8000794:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 8000796:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000798:	2201      	movs	r2, #1
	LSLS 	R2, #24
 800079a:	0612      	lsls	r2, r2, #24
	ORRS	R0, R2
 800079c:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800079e:	6008      	str	r0, [r1, #0]
	BX LR
 80007a0:	4770      	bx	lr

080007a2 <ASM_RCC_CR_PLL1RDY>:

ASM_RCC_CR_PLL1RDY:
	LDR		R1, =RCC_BASE_ADDR
 80007a2:	4940      	ldr	r1, [pc, #256]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R0, [R1]
 80007a4:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80007a6:	2201      	movs	r2, #1
	LSLS 	R2, #25
 80007a8:	0652      	lsls	r2, r2, #25
	ANDS	R0, R2, R0
 80007aa:	4010      	ands	r0, r2
	BX LR
 80007ac:	4770      	bx	lr

080007ae <ASM_RCC_PLL1CFGR_PLL1SRC_HSI16>:
01: MSIS clock selected as PLL1 clock entry
10: HSI16 clock selected as PLL1 clock entry
11: HSE clock selected as PLL1 clock entry
*/
ASM_RCC_PLL1CFGR_PLL1SRC_HSI16:
	LDR		R1, =RCC_BASE_ADDR
 80007ae:	493d      	ldr	r1, [pc, #244]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1CFGR_OFFSET
 80007b0:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 80007b4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80007b6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 80007b8:	2203      	movs	r2, #3
	MVNS	R2, R2
 80007ba:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 80007bc:	4010      	ands	r0, r2
	MOVS	R2, #0x2
 80007be:	2202      	movs	r2, #2
	ORRS	R0, R2
 80007c0:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80007c2:	6008      	str	r0, [r1, #0]
	BX LR
 80007c4:	4770      	bx	lr

080007c6 <ASM_RCC_PLL1CFGR_PLL1PEN>:
power, PLL1PEN and PLL1P bits must be set to 0 when pll1_p_ck is not used.
0: pll1_p_ck output disabled
1: pll1_p_ck output enabled
*/
ASM_RCC_PLL1CFGR_PLL1PEN:
	LDR		R1, =RCC_BASE_ADDR
 80007c6:	4937      	ldr	r1, [pc, #220]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1CFGR_OFFSET
 80007c8:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 80007cc:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80007ce:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, #0x1
 80007d0:	2201      	movs	r2, #1
	LSLS 	R2, #16
 80007d2:	0412      	lsls	r2, r2, #16
	ORRS	R0, R2
 80007d4:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80007d6:	6008      	str	r0, [r1, #0]
	BX LR
 80007d8:	4770      	bx	lr

080007da <ASM_RCC_PLL1CFGR_PLL1QEN>:

ASM_RCC_PLL1CFGR_PLL1QEN:
	LDR		R1, =RCC_BASE_ADDR
 80007da:	4932      	ldr	r1, [pc, #200]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1CFGR_OFFSET
 80007dc:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 80007e0:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80007e2:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, #0x1
 80007e4:	2201      	movs	r2, #1
	LSLS 	R2, #17
 80007e6:	0452      	lsls	r2, r2, #17
	ORRS	R0, R2
 80007e8:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80007ea:	6008      	str	r0, [r1, #0]
	BX LR
 80007ec:	4770      	bx	lr

080007ee <ASM_RCC_PLL1CFGR_PLL1REN>:

ASM_RCC_PLL1CFGR_PLL1REN:
	LDR		R1, =RCC_BASE_ADDR
 80007ee:	492d      	ldr	r1, [pc, #180]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1CFGR_OFFSET
 80007f0:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 80007f4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80007f6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, #0x1
 80007f8:	2201      	movs	r2, #1
	LSLS 	R2, #18
 80007fa:	0492      	lsls	r2, r2, #18
	ORRS	R0, R2
 80007fc:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80007fe:	6008      	str	r0, [r1, #0]
	BX LR
 8000800:	4770      	bx	lr

08000802 <ASM_RCC_PLL1CFGR_PLL1M_3>:
0010: division by 3
...
1111: division by 16
*/
ASM_RCC_PLL1CFGR_PLL1M_3:
	LDR		R1, =RCC_BASE_ADDR
 8000802:	4928      	ldr	r1, [pc, #160]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1CFGR_OFFSET
 8000804:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 8000808:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800080a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, #0xf
 800080c:	220f      	movs	r2, #15
	LSLS 	R2, #8
 800080e:	0212      	lsls	r2, r2, #8
	MVNS	R2, R2
 8000810:	43d2      	mvns	r2, r2
	ANDS 	R0, R2	//clear bits
 8000812:	4010      	ands	r0, r2
	MOVS	R2, #2
 8000814:	2202      	movs	r2, #2
	LSLS	R2, #8
 8000816:	0212      	lsls	r2, r2, #8
	ORRS	R0, R2
 8000818:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800081a:	6008      	str	r0, [r1, #0]
	BX LR
 800081c:	4770      	bx	lr

0800081e <ASM_RCC_PLL1DIVR_PLL1N_4>:
PLL1N between 4 and 512
–
input frequency Fref1_ck between 4 and 16 MHz
*/
ASM_RCC_PLL1DIVR_PLL1N_4:
	LDR		R1, =RCC_BASE_ADDR
 800081e:	4921      	ldr	r1, [pc, #132]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1DIVR_OFFSET
 8000820:	f04f 0234 	mov.w	r2, #52	@ 0x34
	ADDS	R1, R2
 8000824:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000826:	6808      	ldr	r0, [r1, #0]
	MOVS	R3, #0xf	//1111
 8000828:	230f      	movs	r3, #15
	LSLS 	R2, R3, #4	//11110000
 800082a:	011a      	lsls	r2, r3, #4
	ORRS	R2, R3		//11111111
 800082c:	431a      	orrs	r2, r3
	LSLS	R2, #2		//1111111100
 800082e:	0092      	lsls	r2, r2, #2
	ORRS	R2, 0x3
 8000830:	f052 0203 	orrs.w	r2, r2, #3
	MVNS	R2, R2
 8000834:	43d2      	mvns	r2, r2
	ANDS 	R0, R2		//clear 8 bits
 8000836:	4010      	ands	r0, r2
	MOVS	R3, #0x003
 8000838:	2303      	movs	r3, #3
	ORRS	R0, R3
 800083a:	4318      	orrs	r0, r3
	STR		R0, [R1]
 800083c:	6008      	str	r0, [r1, #0]
	BX LR
 800083e:	4770      	bx	lr

08000840 <ASM_RCC_PLL1DIVR_PLL1N_5>:

ASM_RCC_PLL1DIVR_PLL1N_5:
	LDR		R1, =RCC_BASE_ADDR
 8000840:	4918      	ldr	r1, [pc, #96]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1DIVR_OFFSET
 8000842:	f04f 0234 	mov.w	r2, #52	@ 0x34
	ADDS	R1, R2
 8000846:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000848:	6808      	ldr	r0, [r1, #0]
	MOVS	R3, #0xf	//1111
 800084a:	230f      	movs	r3, #15
	LSLS 	R2, R3, #4	//11110000
 800084c:	011a      	lsls	r2, r3, #4
	ORRS	R2, R3		//11111111
 800084e:	431a      	orrs	r2, r3
	LSLS	R2, #2		//1111111100
 8000850:	0092      	lsls	r2, r2, #2
	ORRS	R2, 0x3
 8000852:	f052 0203 	orrs.w	r2, r2, #3
	MVNS	R2, R2
 8000856:	43d2      	mvns	r2, r2
	ANDS 	R0, R2		//clear 8 bits
 8000858:	4010      	ands	r0, r2
	MOVS	R3, #0x004
 800085a:	2304      	movs	r3, #4
	ORRS	R0, R3
 800085c:	4318      	orrs	r0, r3
	STR		R0, [R1]
 800085e:	6008      	str	r0, [r1, #0]
	BX LR
 8000860:	4770      	bx	lr

08000862 <ASM_RCC_PLL1DIVR_PLL1N_6>:

ASM_RCC_PLL1DIVR_PLL1N_6:
	LDR		R1, =RCC_BASE_ADDR
 8000862:	4910      	ldr	r1, [pc, #64]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR 	R2, =RCC_PLL1DIVR_OFFSET
 8000864:	f04f 0234 	mov.w	r2, #52	@ 0x34
	ADDS	R1, R2
 8000868:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800086a:	6808      	ldr	r0, [r1, #0]
	MOVS	R3, #0xf	//1111
 800086c:	230f      	movs	r3, #15
	LSLS 	R2, R3, #4	//11110000
 800086e:	011a      	lsls	r2, r3, #4
	ORRS	R2, R3		//11111111
 8000870:	431a      	orrs	r2, r3
	LSLS	R2, #2		//1111111100
 8000872:	0092      	lsls	r2, r2, #2
	ORRS	R2, 0x3
 8000874:	f052 0203 	orrs.w	r2, r2, #3
	MVNS	R2, R2
 8000878:	43d2      	mvns	r2, r2
	ANDS 	R0, R2		//clear 8 bits
 800087a:	4010      	ands	r0, r2
	MOVS	R3, #0x005
 800087c:	2305      	movs	r3, #5
	ORRS	R0, R3
 800087e:	4318      	orrs	r0, r3
	STR		R0, [R1]
 8000880:	6008      	str	r0, [r1, #0]
	BX LR
 8000882:	4770      	bx	lr

08000884 <ASM_RCC_CFGR1_SW_PLL1>:
01: HSI16 selected as system clock
10: HSE selected as system clock
11: PLL pll1_r_ck selected as system clock
*/
ASM_RCC_CFGR1_SW_PLL1:
	LDR		R1, =RCC_BASE_ADDR
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 8000886:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 800088a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800088c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 800088e:	2203      	movs	r2, #3
	ORRS	R0, R2
 8000890:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000892:	6008      	str	r0, [r1, #0]
	BX LR
 8000894:	4770      	bx	lr

08000896 <ASM_RCC_CFGR1_SWS>:

ASM_RCC_CFGR1_SWS:
	LDR		R1, =RCC_BASE_ADDR
 8000896:	4903      	ldr	r1, [pc, #12]	@ (80008a4 <ASM_RCC_CFGR1_SWS+0xe>)
	LDR		R2, =RCC_CFGR1_OFFSET
 8000898:	f04f 021c 	mov.w	r2, #28
	ADDS	R1, R2
 800089c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800089e:	6808      	ldr	r0, [r1, #0]
	BX LR
 80008a0:	4770      	bx	lr
 80008a2:	0000      	.short	0x0000
	LDR		R1, =RCC_BASE_ADDR
 80008a4:	46020c00 	.word	0x46020c00

080008a8 <ASM_SPI_IER_EOTIE_Set>:
.equ SPI_UDRDR_OFFSET,		0x4C

//SPI_CR2

ASM_SPI_IER_EOTIE_Set:
	LDR		R1, =SPI_BASE_ADDR
 80008a8:	49c2      	ldr	r1, [pc, #776]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IER_OFFSET
 80008aa:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 80008ae:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80008b0:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80008b2:	2201      	movs	r2, #1
	LSLS	R2, #3
 80008b4:	00d2      	lsls	r2, r2, #3
	ORRS	R0, R2
 80008b6:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80008b8:	6008      	str	r0, [r1, #0]
	BX LR
 80008ba:	4770      	bx	lr

080008bc <ASM_SPI_IER_TXPIE_Set>:

ASM_SPI_IER_TXPIE_Set:
	LDR		R1, =SPI_BASE_ADDR
 80008bc:	49bd      	ldr	r1, [pc, #756]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IER_OFFSET
 80008be:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 80008c2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80008c4:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80008c6:	2201      	movs	r2, #1
	LSLS	R2, #1
 80008c8:	0052      	lsls	r2, r2, #1
	ORRS	R0, R2
 80008ca:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80008cc:	6008      	str	r0, [r1, #0]
	BX LR
 80008ce:	4770      	bx	lr

080008d0 <ASM_SPI_IER_RXPIE_Set>:
Bit 0 RXPIE: RXP interrupt enable
0: RXP interrupt disabled
1: RXP interrupt enabled
*/
ASM_SPI_IER_RXPIE_Set:
	LDR		R1, =SPI_BASE_ADDR
 80008d0:	49b8      	ldr	r1, [pc, #736]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IER_OFFSET
 80008d2:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 80008d6:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80008d8:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80008da:	2201      	movs	r2, #1
	ORRS	R0, R2
 80008dc:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80008de:	6008      	str	r0, [r1, #0]
	BX LR
 80008e0:	4770      	bx	lr

080008e2 <ASM_SPI_IER_TXTFIE_Set>:



ASM_SPI_IER_TXTFIE_Set:
	LDR		R1, =SPI_BASE_ADDR
 80008e2:	49b4      	ldr	r1, [pc, #720]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IER_OFFSET
 80008e4:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 80008e8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80008ea:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80008ec:	2201      	movs	r2, #1
	LSLS	R2, #4
 80008ee:	0112      	lsls	r2, r2, #4
	ORRS	R0, R2
 80008f0:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80008f2:	6008      	str	r0, [r1, #0]
	BX LR
 80008f4:	4770      	bx	lr

080008f6 <ASM_SPI_SR_Get>:

ASM_SPI_SR_Get:
	LDR		R1, =SPI_BASE_ADDR
 80008f6:	49af      	ldr	r1, [pc, #700]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_SR_OFFSET
 80008f8:	f04f 0214 	mov.w	r2, #20
	ADDS	R1, R2
 80008fc:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80008fe:	6808      	ldr	r0, [r1, #0]
	BX LR
 8000900:	4770      	bx	lr

08000902 <ASM_SPI_IFCR_EOTC_Clear>:

ASM_SPI_IFCR_EOTC_Clear:
	LDR		R1, =SPI_BASE_ADDR
 8000902:	49ac      	ldr	r1, [pc, #688]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IFCR_OFFSET
 8000904:	f04f 0218 	mov.w	r2, #24
	ADDS	R1, R2
 8000908:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800090a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800090c:	2201      	movs	r2, #1
	LSLS	R2, #3
 800090e:	00d2      	lsls	r2, r2, #3
	ORRS 	R0, R2
 8000910:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000912:	6008      	str	r0, [r1, #0]
	BX LR
 8000914:	4770      	bx	lr

08000916 <ASM_SPI_IFCR_OVRC>:

ASM_SPI_IFCR_OVRC:
	LDR		R1, =SPI_BASE_ADDR
 8000916:	49a7      	ldr	r1, [pc, #668]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IFCR_OFFSET
 8000918:	f04f 0218 	mov.w	r2, #24
	ADDS	R1, R2
 800091c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800091e:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000920:	2201      	movs	r2, #1
	LSLS	R2, #6
 8000922:	0192      	lsls	r2, r2, #6
	ORRS 	R0, R2
 8000924:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000926:	6008      	str	r0, [r1, #0]
	BX LR
 8000928:	4770      	bx	lr

0800092a <ASM_SPI_IFCR_TXTFC>:

ASM_SPI_IFCR_TXTFC:
	LDR		R1, =SPI_BASE_ADDR
 800092a:	49a2      	ldr	r1, [pc, #648]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_IFCR_OFFSET
 800092c:	f04f 0218 	mov.w	r2, #24
	ADDS	R1, R2
 8000930:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000932:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000934:	2201      	movs	r2, #1
	LSLS	R2, #4
 8000936:	0112      	lsls	r2, r2, #4
	ORRS 	R0, R2
 8000938:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800093a:	6008      	str	r0, [r1, #0]
	BX LR
 800093c:	4770      	bx	lr

0800093e <ASM_SPI_CR2_TSIZE>:

ASM_SPI_CR2_TSIZE:
	LDR		R1, =SPI_BASE_ADDR
 800093e:	499d      	ldr	r1, [pc, #628]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR2_OFFSET
 8000940:	f04f 0204 	mov.w	r2, #4
	ADDS	R1, R2
 8000944:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000946:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, #2 //16
 8000948:	2202      	movs	r2, #2
	ORRS 	R0, R2
 800094a:	4310      	orrs	r0, r2
	STR		R0, [R1]
 800094c:	6008      	str	r0, [r1, #0]
	BX LR
 800094e:	4770      	bx	lr

08000950 <ASM_SPI_CFG2_MASTER_Set>:


ASM_SPI_CFG2_MASTER_Set:
	LDR		R1, =SPI_BASE_ADDR
 8000950:	4998      	ldr	r1, [pc, #608]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000952:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000956:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000958:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800095a:	2201      	movs	r2, #1
	LSLS	R2, #22
 800095c:	0592      	lsls	r2, r2, #22
	ORRS	R0, R2
 800095e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000960:	6008      	str	r0, [r1, #0]
	BX LR
 8000962:	4770      	bx	lr

08000964 <ASM_SPI_CFG2_COMM_Full_Duplex>:


ASM_SPI_CFG2_COMM_Full_Duplex:
	LDR		R1, =SPI_BASE_ADDR
 8000964:	4993      	ldr	r1, [pc, #588]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000966:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 800096a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 800096c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 800096e:	2203      	movs	r2, #3
	LSLS	R2, #17
 8000970:	0452      	lsls	r2, r2, #17
	MVNS	R2, R2
 8000972:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000974:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000976:	6008      	str	r0, [r1, #0]
	BX LR
 8000978:	4770      	bx	lr

0800097a <ASM_SPI_CFG2_CPOL_0>:

ASM_SPI_CFG2_CPOL_0:
	LDR		R1, =SPI_BASE_ADDR
 800097a:	498e      	ldr	r1, [pc, #568]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 800097c:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000980:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000982:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000984:	2201      	movs	r2, #1
	LSLS	R2, #25
 8000986:	0652      	lsls	r2, r2, #25
	MVNS	R2, R2
 8000988:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 800098a:	4010      	ands	r0, r2
	STR		R0, [R1]
 800098c:	6008      	str	r0, [r1, #0]
	BX LR
 800098e:	4770      	bx	lr

08000990 <ASM_SPI_CFG2_CPOL_1>:

ASM_SPI_CFG2_CPOL_1:
	LDR		R1, =SPI_BASE_ADDR
 8000990:	4988      	ldr	r1, [pc, #544]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000992:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000996:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000998:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 800099a:	2201      	movs	r2, #1
	LSLS	R2, #25
 800099c:	0652      	lsls	r2, r2, #25
	ORRS 	R0, R2
 800099e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80009a0:	6008      	str	r0, [r1, #0]
	BX LR
 80009a2:	4770      	bx	lr

080009a4 <ASM_SPI_CFG2_CPHA_0>:

ASM_SPI_CFG2_CPHA_0:
	LDR		R1, =SPI_BASE_ADDR
 80009a4:	4983      	ldr	r1, [pc, #524]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 80009a6:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80009aa:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80009ac:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80009ae:	2201      	movs	r2, #1
	LSLS	R2, #24
 80009b0:	0612      	lsls	r2, r2, #24
	MVNS	R2, R2
 80009b2:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 80009b4:	4010      	ands	r0, r2
	STR		R0, [R1]
 80009b6:	6008      	str	r0, [r1, #0]
	BX LR
 80009b8:	4770      	bx	lr

080009ba <ASM_SPI_CFG2_SSM_0>:

//Hardware SS management (SSM = 0)
ASM_SPI_CFG2_SSM_0:
	LDR		R1, =SPI_BASE_ADDR
 80009ba:	497e      	ldr	r1, [pc, #504]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 80009bc:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80009c0:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80009c2:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80009c4:	2201      	movs	r2, #1
	LSLS	R2, #26
 80009c6:	0692      	lsls	r2, r2, #26
	MVNS	R2, R2
 80009c8:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 80009ca:	4010      	ands	r0, r2
	STR		R0, [R1]
 80009cc:	6008      	str	r0, [r1, #0]
	BX LR
 80009ce:	4770      	bx	lr

080009d0 <ASM_SPI_CFG2_SSM_1>:

ASM_SPI_CFG2_SSM_1:
	LDR		R1, =SPI_BASE_ADDR
 80009d0:	4978      	ldr	r1, [pc, #480]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 80009d2:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80009d6:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80009d8:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80009da:	2201      	movs	r2, #1
	LSLS	R2, #26
 80009dc:	0692      	lsls	r2, r2, #26
	ORRS 	R0, R2
 80009de:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80009e0:	6008      	str	r0, [r1, #0]
	BX LR
 80009e2:	4770      	bx	lr

080009e4 <ASM_SPI_CFG2_SSOE_1>:

//SS output enable (SSOE = 1):
ASM_SPI_CFG2_SSOE_1:
	LDR		R1, =SPI_BASE_ADDR
 80009e4:	4973      	ldr	r1, [pc, #460]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 80009e6:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 80009ea:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 80009ec:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 80009ee:	2201      	movs	r2, #1
	LSLS	R2, #29
 80009f0:	0752      	lsls	r2, r2, #29
	ORRS 	R0, R2
 80009f2:	4310      	orrs	r0, r2
	STR		R0, [R1]
 80009f4:	6008      	str	r0, [r1, #0]
	BX LR
 80009f6:	4770      	bx	lr

080009f8 <ASM_SPI_CFG1_DSIZE_8>:



//SPI_CFG1 Bits 4:0 DSIZE[4:0]: number of bits in at single SPI data frame
ASM_SPI_CFG1_DSIZE_8:
	BX LR
 80009f8:	4770      	bx	lr

080009fa <ASM_SPI_CFG1_FTHLV_2>:
0001: 2-data
0010: 3-data
0011: 4-data
*/
ASM_SPI_CFG1_FTHLV_2:
	LDR		R1, =SPI_BASE_ADDR
 80009fa:	496e      	ldr	r1, [pc, #440]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 80009fc:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000a00:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a02:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0xf
 8000a04:	220f      	movs	r2, #15
	LSLS	R2, #5
 8000a06:	0152      	lsls	r2, r2, #5
	MVNS	R2, R2
 8000a08:	43d2      	mvns	r2, r2
	ANDS 	R0, R2	//clear bits
 8000a0a:	4010      	ands	r0, r2
	MOVS	R2, 0x7
 8000a0c:	2207      	movs	r2, #7
	LSLS	R2, #5
 8000a0e:	0152      	lsls	r2, r2, #5
	ORRS 	R0, R2
 8000a10:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000a12:	6008      	str	r0, [r1, #0]
	BX LR
 8000a14:	4770      	bx	lr

08000a16 <ASM_SPI_CFG2_SSOM_1>:

//Bit 30 SSOM: SS output management in Master mode
//0: SS is kept at active level till data transfer is completed, it becomes inactive with EOT flag
//1: SPI data frames are interleaved with SS non active pulses when MIDI[3:0]>1
ASM_SPI_CFG2_SSOM_1:
	LDR		R1, =SPI_BASE_ADDR
 8000a16:	4967      	ldr	r1, [pc, #412]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000a18:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000a1c:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a1e:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000a20:	2201      	movs	r2, #1
	LSLS	R2, #30
 8000a22:	0792      	lsls	r2, r2, #30
	ORRS 	R0, R2
 8000a24:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000a26:	6008      	str	r0, [r1, #0]
	BX LR
 8000a28:	4770      	bx	lr

08000a2a <ASM_SPI_CFG2_SSOM_0>:

ASM_SPI_CFG2_SSOM_0:
	LDR		R1, =SPI_BASE_ADDR
 8000a2a:	4962      	ldr	r1, [pc, #392]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000a2c:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000a30:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a32:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000a34:	2201      	movs	r2, #1
	LSLS	R2, #30
 8000a36:	0792      	lsls	r2, r2, #30
	MVNS	R2, R2
 8000a38:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000a3a:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000a3c:	6008      	str	r0, [r1, #0]
	BX LR
 8000a3e:	4770      	bx	lr

08000a40 <ASM_SPI_CFG2_MIDI_Set>:
//0000: no delay
//0001: 1 clock cycle period delay
//...
//1111: 15 clock cycle periods delay
ASM_SPI_CFG2_MIDI_Set:
	BX LR
 8000a40:	4770      	bx	lr

08000a42 <ASM_SPI_CFG2_MSSI_Set>:
//0000: no extra delay
//0001: 1 clock cycle period delay added
//...
//1111: 15 clock cycle periods delay added
ASM_SPI_CFG2_MSSI_Set:
	BX LR
 8000a42:	4770      	bx	lr

08000a44 <ASM_SPI_CFG1_MBR_4>:
//110: SPI master clock/128
//111: SPI master clock/256


ASM_SPI_CFG1_MBR_4:
	LDR		R1, =SPI_BASE_ADDR
 8000a44:	495b      	ldr	r1, [pc, #364]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 8000a46:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000a4a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a4c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x7
 8000a4e:	2207      	movs	r2, #7
	LSLS	R2, #28
 8000a50:	0712      	lsls	r2, r2, #28
	MVNS	R2, R2 //clear bits
 8000a52:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000a54:	4010      	ands	r0, r2
	MOVS	R2, #1
 8000a56:	2201      	movs	r2, #1
	LSLS	R2, #28
 8000a58:	0712      	lsls	r2, r2, #28
	ORRS 	R0, R2
 8000a5a:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000a5c:	6008      	str	r0, [r1, #0]
	BX LR
 8000a5e:	4770      	bx	lr

08000a60 <ASM_SPI_CFG1_MBR_256>:

ASM_SPI_CFG1_MBR_256:
	LDR		R1, =SPI_BASE_ADDR
 8000a60:	4954      	ldr	r1, [pc, #336]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 8000a62:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000a66:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a68:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x7
 8000a6a:	2207      	movs	r2, #7
	LSLS	R2, #28
 8000a6c:	0712      	lsls	r2, r2, #28
	ORRS 	R0, R2
 8000a6e:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000a70:	6008      	str	r0, [r1, #0]
	BX LR
 8000a72:	4770      	bx	lr

08000a74 <ASM_SPI_CFG1_MBR_64>:

ASM_SPI_CFG1_MBR_64:
	LDR		R1, =SPI_BASE_ADDR
 8000a74:	494f      	ldr	r1, [pc, #316]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 8000a76:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000a7a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a7c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x5
 8000a7e:	2205      	movs	r2, #5
	LSLS	R2, #28
 8000a80:	0712      	lsls	r2, r2, #28
	ORRS 	R0, R2
 8000a82:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000a84:	6008      	str	r0, [r1, #0]
	BX LR
 8000a86:	4770      	bx	lr

08000a88 <ASM_SPI_CFG1_BPASS_0>:

//Bit 31 BPASS: bypass of the prescaler at master baud rate clock generator
//0: bypass is disabled
//1: bypass is enabled
ASM_SPI_CFG1_BPASS_0:
	LDR		R1, =SPI_BASE_ADDR
 8000a88:	494a      	ldr	r1, [pc, #296]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 8000a8a:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000a8e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000a90:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000a92:	2201      	movs	r2, #1
	LSLS	R2, #31
 8000a94:	07d2      	lsls	r2, r2, #31
	MVNS	R2, R2
 8000a96:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000a98:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000a9a:	6008      	str	r0, [r1, #0]
	BX LR
 8000a9c:	4770      	bx	lr

08000a9e <ASM_SPI_CFG1_BPASS_1>:

ASM_SPI_CFG1_BPASS_1:
	LDR		R1, =SPI_BASE_ADDR
 8000a9e:	4945      	ldr	r1, [pc, #276]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG1_OFFSET
 8000aa0:	f04f 0208 	mov.w	r2, #8
	ADDS	R1, R2
 8000aa4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000aa6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000aa8:	2201      	movs	r2, #1
	LSLS	R2, #31
 8000aaa:	07d2      	lsls	r2, r2, #31
	ORRS 	R0, R2
 8000aac:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000aae:	6008      	str	r0, [r1, #0]
	BX LR
 8000ab0:	4770      	bx	lr

08000ab2 <ASM_SPI_CFG2_LSBFRST_MSB>:

ASM_SPI_CFG2_LSBFRST_MSB:
	LDR		R1, =SPI_BASE_ADDR
 8000ab2:	4940      	ldr	r1, [pc, #256]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000ab4:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000ab8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000aba:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000abc:	2201      	movs	r2, #1
	LSLS	R2, #23
 8000abe:	05d2      	lsls	r2, r2, #23
	MVNS	R2, R2
 8000ac0:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000ac2:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000ac4:	6008      	str	r0, [r1, #0]
	BX LR
 8000ac6:	4770      	bx	lr

08000ac8 <ASM_SPI_CFG2_LSBFRST_LSB>:

ASM_SPI_CFG2_LSBFRST_LSB:
	LDR		R1, =SPI_BASE_ADDR
 8000ac8:	493a      	ldr	r1, [pc, #232]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000aca:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000ace:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000ad0:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000ad2:	2201      	movs	r2, #1
	LSLS	R2, #23
 8000ad4:	05d2      	lsls	r2, r2, #23
	ORRS 	R0, R2
 8000ad6:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000ad8:	6008      	str	r0, [r1, #0]
	BX LR
 8000ada:	4770      	bx	lr

08000adc <ASM_SPI_CFG2_AFCNTR_1>:
//Bit 31 AFCNTR: alternate function GPIOs control
//This bit is taken into account when SPE = 0 only
//0: The peripheral takes no control of GPIOs while it is disabled
//1: The peripheral keeps always control of all associated GPIOs
ASM_SPI_CFG2_AFCNTR_1:
	LDR		R1, =SPI_BASE_ADDR
 8000adc:	4935      	ldr	r1, [pc, #212]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000ade:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000ae2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000ae4:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000ae6:	2201      	movs	r2, #1
	LSLS	R2, #31
 8000ae8:	07d2      	lsls	r2, r2, #31
	ORRS 	R0, R2
 8000aea:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000aec:	6008      	str	r0, [r1, #0]
	BX LR
 8000aee:	4770      	bx	lr

08000af0 <ASM_SPI_CR1_SPE_1>:
//Bit 0 SPE: serial peripheral enable
//This bit is set by and cleared by software.
//0: Serial peripheral disabled.
//1: Serial peripheral enabled
ASM_SPI_CR1_SPE_1:
	LDR		R1, =SPI_BASE_ADDR
 8000af0:	4930      	ldr	r1, [pc, #192]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR1_OFFSET
 8000af2:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000af6:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000af8:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000afa:	2201      	movs	r2, #1
	LSLS	R2, #0
 8000afc:	0012      	movs	r2, r2
	ORRS 	R0, R2
 8000afe:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000b00:	6008      	str	r0, [r1, #0]
	BX LR
 8000b02:	4770      	bx	lr

08000b04 <ASM_SPI_CR1_SPE_0>:

ASM_SPI_CR1_SPE_0:
	LDR		R1, =SPI_BASE_ADDR
 8000b04:	492b      	ldr	r1, [pc, #172]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR1_OFFSET
 8000b06:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000b0a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b0c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b0e:	2201      	movs	r2, #1
	LSLS	R2, #0
 8000b10:	0012      	movs	r2, r2
	MVNS 	R2, R2
 8000b12:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000b14:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000b16:	6008      	str	r0, [r1, #0]
	BX LR
 8000b18:	4770      	bx	lr

08000b1a <ASM_SPI_CR1_CSTART_1>:
//cleared by hardware when end of transfer (EOT) flag is set or when a transaction suspend
//request is accepted.
//0: master transfer is at idle
//1: master transfer is ongoing or temporary suspended by automatic suspend
ASM_SPI_CR1_CSTART_1:
	LDR		R1, =SPI_BASE_ADDR
 8000b1a:	4926      	ldr	r1, [pc, #152]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR1_OFFSET
 8000b1c:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000b20:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b22:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b24:	2201      	movs	r2, #1
	LSLS	R2, #9
 8000b26:	0252      	lsls	r2, r2, #9
	ORRS 	R0, R2
 8000b28:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000b2a:	6008      	str	r0, [r1, #0]
	BX LR
 8000b2c:	4770      	bx	lr

08000b2e <ASM_SPI_CR1_SSI_1>:

//Bit 12 SSI: internal SS signal input level
//This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the
//peripheral SS input internally and the I/O value of the SS pin is ignored.
ASM_SPI_CR1_SSI_1:
	LDR		R1, =SPI_BASE_ADDR
 8000b2e:	4921      	ldr	r1, [pc, #132]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR1_OFFSET
 8000b30:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000b34:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b36:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b38:	2201      	movs	r2, #1
	LSLS	R2, #12
 8000b3a:	0312      	lsls	r2, r2, #12
	ORRS 	R0, R2
 8000b3c:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000b3e:	6008      	str	r0, [r1, #0]
	BX LR
 8000b40:	4770      	bx	lr

08000b42 <ASM_SPI_CR1_SSI_0>:

ASM_SPI_CR1_SSI_0:
	LDR		R1, =SPI_BASE_ADDR
 8000b42:	491c      	ldr	r1, [pc, #112]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CR1_OFFSET
 8000b44:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000b48:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b4a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b4c:	2201      	movs	r2, #1
	LSLS	R2, #12
 8000b4e:	0312      	lsls	r2, r2, #12
	MVNS	R2, R2
 8000b50:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000b52:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000b54:	6008      	str	r0, [r1, #0]
	BX LR
 8000b56:	4770      	bx	lr

08000b58 <ASM_SPI_TXDR_Set>:



ASM_SPI_TXDR_Set:
	LDR		R1, =SPI_BASE_ADDR
 8000b58:	4916      	ldr	r1, [pc, #88]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_TXDR_OFFSET
 8000b5a:	f04f 0220 	mov.w	r2, #32
	ADDS	R1, R2
 8000b5e:	1889      	adds	r1, r1, r2
	LDR		R3, [R1]
 8000b60:	680b      	ldr	r3, [r1, #0]
	ORRS 	R3, R0
 8000b62:	4303      	orrs	r3, r0
	STR		R3, [R1]
 8000b64:	600b      	str	r3, [r1, #0]
	BX LR
 8000b66:	4770      	bx	lr

08000b68 <ASM_SPI_RXDR_Get>:

ASM_SPI_RXDR_Get:
	LDR		R1, =SPI_BASE_ADDR
 8000b68:	4912      	ldr	r1, [pc, #72]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_RXDR_OFFSET
 8000b6a:	f04f 0230 	mov.w	r2, #48	@ 0x30
	ADDS	R1, R2
 8000b6e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b70:	6808      	ldr	r0, [r1, #0]
	BX LR
 8000b72:	4770      	bx	lr

08000b74 <ASM_SPI_CFG2_SSIOP_0>:
 * SSIOP: SS input/output polarity.
 * 0: low level is active for SS signal
 * 1: high level is active for SS signal
 */
ASM_SPI_CFG2_SSIOP_0:
	LDR		R1, =SPI_BASE_ADDR
 8000b74:	490f      	ldr	r1, [pc, #60]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000b76:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000b7a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b7c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b7e:	2201      	movs	r2, #1
	LSLS	R2, #28
 8000b80:	0712      	lsls	r2, r2, #28
	MVNS	R2, R2
 8000b82:	43d2      	mvns	r2, r2
	ANDS 	R0, R2
 8000b84:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000b86:	6008      	str	r0, [r1, #0]
	BX LR
 8000b88:	4770      	bx	lr

08000b8a <ASM_SPI_CFG2_SSIOP_1>:

ASM_SPI_CFG2_SSIOP_1:
	LDR		R1, =SPI_BASE_ADDR
 8000b8a:	490a      	ldr	r1, [pc, #40]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000b8c:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000b90:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000b92:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000b94:	2201      	movs	r2, #1
	LSLS	R2, #28
 8000b96:	0712      	lsls	r2, r2, #28
	ORRS 	R0, R2
 8000b98:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000b9a:	6008      	str	r0, [r1, #0]
	BX LR
 8000b9c:	4770      	bx	lr

08000b9e <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY>:

ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY:
	LDR		R1, =SPI_BASE_ADDR
 8000b9e:	4905      	ldr	r1, [pc, #20]	@ (8000bb4 <ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY+0x16>)
	LDR		R2, =SPI_CFG2_OFFSET
 8000ba0:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000ba4:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000ba6:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000ba8:	2201      	movs	r2, #1
	LSLS	R2, #13
 8000baa:	0352      	lsls	r2, r2, #13
	ORRS 	R0, R2
 8000bac:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000bae:	6008      	str	r0, [r1, #0]
	BX LR
 8000bb0:	4770      	bx	lr
 8000bb2:	0000      	.short	0x0000
	LDR		R1, =SPI_BASE_ADDR
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <TIM8_Set_PSC_Value>:
//.equ	PRESCALER, 	0x32c7 	//15999
//.equ	ARRCOUNTTO, 0x3E7	//999	--0.000025
//.equ	CCRCOUNTTO, 0x3E7 // 999

TIM8_Set_PSC_Value:
	LDR		R1, =TIM8_BASE_OFFSET
 8000bb8:	495b      	ldr	r1, [pc, #364]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_PSC_OFFSET
 8000bba:	f04f 0228 	mov.w	r2, #40	@ 0x28
	ADDS	R1, R2
 8000bbe:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000bc0:	6808      	ldr	r0, [r1, #0]
	LDR		R2, =PRESCALER
 8000bc2:	f640 729f 	movw	r2, #3999	@ 0xf9f
	ORRS	R0, R2
 8000bc6:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000bc8:	6008      	str	r0, [r1, #0]
	BX LR
 8000bca:	4770      	bx	lr

08000bcc <TIM8_Set_ARR_Value>:

//Auto-Reload Register (TIMx_ARR)
TIM8_Set_ARR_Value:
	LDR		R1, =TIM8_BASE_OFFSET
 8000bcc:	4956      	ldr	r1, [pc, #344]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_ARR_OFFSET
 8000bce:	f04f 022c 	mov.w	r2, #44	@ 0x2c
	ADDS	R1, R2
 8000bd2:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000bd4:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x0
 8000bd6:	2200      	movs	r2, #0
	ANDS	R0, R2
 8000bd8:	4010      	ands	r0, r2
	LDR		R2, =ARRCOUNTTO
 8000bda:	f240 32e7 	movw	r2, #999	@ 0x3e7
	ORRS	R0, R2
 8000bde:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000be0:	6008      	str	r0, [r1, #0]
	BX LR
 8000be2:	4770      	bx	lr

08000be4 <TIM8_Clear_UIF_Flag>:

TIM8_Clear_UIF_Flag:
	LDR		R1, =TIM8_BASE_OFFSET
 8000be4:	4950      	ldr	r1, [pc, #320]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_SR_OFFSET
 8000be6:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 8000bea:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000bec:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000bee:	2201      	movs	r2, #1
	MVNS	R2, R2
 8000bf0:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000bf2:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000bf4:	6008      	str	r0, [r1, #0]
	BX LR
 8000bf6:	4770      	bx	lr

08000bf8 <TIM8_Set_CCnS_To_Channel_Output>:

TIM8_Set_CCnS_To_Channel_Output:
	LDR		R1, =TIM8_BASE_OFFSET
 8000bf8:	494b      	ldr	r1, [pc, #300]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CCMR1_OFFSET
 8000bfa:	f04f 0218 	mov.w	r2, #24
	ADDS	R1, R2
 8000bfe:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c00:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x3
 8000c02:	2203      	movs	r2, #3
	LSLS	R2, #0
 8000c04:	0012      	movs	r2, r2
	MVNS	R2, R2
 8000c06:	43d2      	mvns	r2, r2
	ANDS	R0, R2		//clear bits 0,1
 8000c08:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000c0a:	6008      	str	r0, [r1, #0]
	BX LR
 8000c0c:	4770      	bx	lr

08000c0e <TIM8_Set_DITHEN_False>:

TIM8_Set_DITHEN_False:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c0e:	4946      	ldr	r1, [pc, #280]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CR1_OFFSET
 8000c10:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000c14:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c16:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000c18:	2201      	movs	r2, #1
	LSLS	R2, #12
 8000c1a:	0312      	lsls	r2, r2, #12
	MVNS	R2, R2
 8000c1c:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000c1e:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000c20:	6008      	str	r0, [r1, #0]
	BX LR
 8000c22:	4770      	bx	lr

08000c24 <TIM8_Set_CCRn_WaveGen_Value>:

TIM8_Set_CCRn_WaveGen_Value:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c24:	4940      	ldr	r1, [pc, #256]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CCR1_OFFSET
 8000c26:	f04f 0234 	mov.w	r2, #52	@ 0x34
	ADDS	R1, R2
 8000c2a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c2c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x0
 8000c2e:	2200      	movs	r2, #0
	ANDS	R0, R2
 8000c30:	4010      	ands	r0, r2
	LDR		R2, =CCRCOUNTTO
 8000c32:	f240 32e7 	movw	r2, #999	@ 0x3e7
	ORRS	R0, R2
 8000c36:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000c38:	6008      	str	r0, [r1, #0]
	BX LR
 8000c3a:	4770      	bx	lr

08000c3c <TIM8_Clear_CC1IF_Flag>:

TIM8_Clear_CC1IF_Flag:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c3c:	493a      	ldr	r1, [pc, #232]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_SR_OFFSET
 8000c3e:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 8000c42:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c44:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000c46:	2201      	movs	r2, #1
	LSLS	R2, #1
 8000c48:	0052      	lsls	r2, r2, #1
	MVNS	R2, R2
 8000c4a:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000c4c:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000c4e:	6008      	str	r0, [r1, #0]
	BX LR
 8000c50:	4770      	bx	lr

08000c52 <TIM8_Set_DIR_UpCounter>:


TIM8_Set_DIR_UpCounter:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c52:	4935      	ldr	r1, [pc, #212]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CR1_OFFSET
 8000c54:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000c58:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c5a:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000c5c:	2201      	movs	r2, #1
	LSLS	R2, #4
 8000c5e:	0112      	lsls	r2, r2, #4
	MVNS	R2, R2
 8000c60:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000c62:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000c64:	6008      	str	r0, [r1, #0]
	BX LR
 8000c66:	4770      	bx	lr

08000c68 <TIM8_Set_OCnM_To_Toggle_Mode>:

TIM8_Set_OCnM_To_Toggle_Mode:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c68:	492f      	ldr	r1, [pc, #188]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CCMR1_OFFSET
 8000c6a:	f04f 0218 	mov.w	r2, #24
	ADDS	R1, R2
 8000c6e:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c70:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000c72:	2201      	movs	r2, #1
	LSLS	R2, #16
 8000c74:	0412      	lsls	r2, r2, #16
	MVNS	R2, R2
 8000c76:	43d2      	mvns	r2, r2
	ANDS	R0, R2 //clear bit 16
 8000c78:	4010      	ands	r0, r2
	MOVS  	R2, #7
 8000c7a:	2207      	movs	r2, #7
	LSLS	R2, #4
 8000c7c:	0112      	lsls	r2, r2, #4
	MVNS	R2, R2
 8000c7e:	43d2      	mvns	r2, r2
	ANDS 	R0, R2 //clear bits 4-6
 8000c80:	4010      	ands	r0, r2
	MOVS	R2, #3
 8000c82:	2203      	movs	r2, #3
	LSLS	R2, #4
 8000c84:	0112      	lsls	r2, r2, #4
	ORRS	R0, R2 //set bits 4, 5
 8000c86:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000c88:	6008      	str	r0, [r1, #0]
	BX LR
 8000c8a:	4770      	bx	lr

08000c8c <TIM8_Set_CC1P_Polarity_ActiveHigh>:

TIM8_Set_CC1P_Polarity_ActiveHigh:
	LDR		R1, =TIM8_BASE_OFFSET
 8000c8c:	4926      	ldr	r1, [pc, #152]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CCER_OFFSET
 8000c8e:	f04f 0220 	mov.w	r2, #32
	ADDS	R1, R2
 8000c92:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000c94:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000c96:	2201      	movs	r2, #1
	LSLS	R2, #1
 8000c98:	0052      	lsls	r2, r2, #1
	MVNS	R2, R2
 8000c9a:	43d2      	mvns	r2, r2
	ANDS	R0, R2 //clear bit 1
 8000c9c:	4010      	ands	r0, r2
	STR		R0, [R1]
 8000c9e:	6008      	str	r0, [r1, #0]
	BX LR
 8000ca0:	4770      	bx	lr

08000ca2 <TIM8_Set_CCnE_Output_Enable_To_GPIO>:

TIM8_Set_CCnE_Output_Enable_To_GPIO:
	LDR		R1, =TIM8_BASE_OFFSET
 8000ca2:	4921      	ldr	r1, [pc, #132]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CCER_OFFSET
 8000ca4:	f04f 0220 	mov.w	r2, #32
	ADDS	R1, R2
 8000ca8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000caa:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x1
 8000cac:	2201      	movs	r2, #1
	ORRS	R0, R2 //set bit 1
 8000cae:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000cb0:	6008      	str	r0, [r1, #0]
	BX LR
 8000cb2:	4770      	bx	lr

08000cb4 <TIM8_Set_CEN_Counter_Enable>:

TIM8_Set_CEN_Counter_Enable:
	LDR		R1, =TIM8_BASE_OFFSET
 8000cb4:	491c      	ldr	r1, [pc, #112]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CR1_OFFSET
 8000cb6:	f04f 0200 	mov.w	r2, #0
	ADDS	R1, R2
 8000cba:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000cbc:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000cbe:	2201      	movs	r2, #1
	ORRS	R0, R2
 8000cc0:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000cc2:	6008      	str	r0, [r1, #0]
	BX LR
 8000cc4:	4770      	bx	lr

08000cc6 <TIM8_Set_MMS_Update_Trigger_Output>:

TIM8_Set_MMS_Update_Trigger_Output:
	LDR		R1, =TIM8_BASE_OFFSET
 8000cc6:	4918      	ldr	r1, [pc, #96]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_CR2_OFFSET
 8000cc8:	f04f 0204 	mov.w	r2, #4
	ADDS	R1, R2
 8000ccc:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000cce:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x7
 8000cd0:	2207      	movs	r2, #7
	LSLS	R2, #4
 8000cd2:	0112      	lsls	r2, r2, #4
	MVNS	R2, R2
 8000cd4:	43d2      	mvns	r2, r2
	ANDS	R0, R2
 8000cd6:	4010      	ands	r0, r2
	MOVS	R2, 0x2
 8000cd8:	2202      	movs	r2, #2
	LSLS	R2, #4
 8000cda:	0112      	lsls	r2, r2, #4
	ORRS	R0, R2
 8000cdc:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000cde:	6008      	str	r0, [r1, #0]
	BX LR
 8000ce0:	4770      	bx	lr

08000ce2 <TIM8_Set_UIF_Update_Interrupt_Enable>:

TIM8_Set_UIF_Update_Interrupt_Enable:
	LDR		R1, =TIM8_BASE_OFFSET
 8000ce2:	4911      	ldr	r1, [pc, #68]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_DIER_OFFSET
 8000ce4:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000ce8:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000cea:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000cec:	2201      	movs	r2, #1
	ORRS	R0, R2
 8000cee:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000cf0:	6008      	str	r0, [r1, #0]
	BX LR
 8000cf2:	4770      	bx	lr

08000cf4 <TIM8_Set_CC1IE_Update_Interrupt_Enable>:

//Bit 1 CC1IE: Capture/Compare 1 interrupt enable
TIM8_Set_CC1IE_Update_Interrupt_Enable:
	LDR		R1, =TIM8_BASE_OFFSET
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_DIER_OFFSET
 8000cf6:	f04f 020c 	mov.w	r2, #12
	ADDS	R1, R2
 8000cfa:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000cfc:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x01
 8000cfe:	2201      	movs	r2, #1
	LSLS	R2, #1
 8000d00:	0052      	lsls	r2, r2, #1
	ORRS	R0, R2
 8000d02:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000d04:	6008      	str	r0, [r1, #0]
	BX LR
 8000d06:	4770      	bx	lr

08000d08 <TIM8_Get_SR_Status>:

TIM8_Get_SR_Status:
	LDR		R1, =TIM8_BASE_OFFSET
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_SR_OFFSET
 8000d0a:	f04f 0210 	mov.w	r2, #16
	ADDS	R1, R2
 8000d0e:	1889      	adds	r1, r1, r2
	LDRH	R0, [R1]
 8000d10:	8808      	ldrh	r0, [r1, #0]
	BX LR
 8000d12:	4770      	bx	lr

08000d14 <TIM8_RCR_Set>:

TIM8_RCR_Set:
	LDR		R1, =TIM8_BASE_OFFSET
 8000d14:	4904      	ldr	r1, [pc, #16]	@ (8000d28 <TIM8_RCR_Set+0x14>)
	LDR		R2, =TIMx_RCR_OFFSET
 8000d16:	f04f 0230 	mov.w	r2, #48	@ 0x30
	ADDS	R1, R2
 8000d1a:	1889      	adds	r1, r1, r2
	LDR		R0, [R1]
 8000d1c:	6808      	ldr	r0, [r1, #0]
	MOVS	R2, 0x14
 8000d1e:	2214      	movs	r2, #20
	ORRS	R0, R2
 8000d20:	4310      	orrs	r0, r2
	STR		R0, [R1]
 8000d22:	6008      	str	r0, [r1, #0]
	BX LR
 8000d24:	4770      	bx	lr
 8000d26:	0000      	.short	0x0000
	LDR		R1, =TIM8_BASE_OFFSET
 8000d28:	40013400 	.word	0x40013400

08000d2c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d38:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d48:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d4c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00b      	beq.n	8000d6c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d54:	e000      	b.n	8000d58 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d58:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f9      	beq.n	8000d56 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d62:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_write>:
void TIM8_init(void);
void SPI_start(void);
void TIM8_start(void);
void NVIC_Interupts_Enable(void);

int _write(int file, char *ptr, int len){
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ffc9 	bl	8000d2c <ITM_SendChar>
	for(int i = 0; i < len; i++){
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
	}
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <main>:
uint8_t tx_buffer[3];
uint32_t rx_buffer;

int stop_flag = 0;

int main(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

	ASM_RCC_AHB2ENR1_GPIOEEN_Set();
 8000db8:	f7ff fbd4 	bl	8000564 <ASM_RCC_AHB2ENR1_GPIOEEN_Set>
	ASM_RCC_AHB2ENR1_GPIODEN_Set();
 8000dbc:	f7ff fbe5 	bl	800058a <ASM_RCC_AHB2ENR1_GPIODEN_Set>
	GPIOE_MODER_BUSY_INPUT();
 8000dc0:	f7ff fb69 	bl	8000496 <GPIOE_MODER_BUSY_INPUT>
	GPIOE_PURDR_BUSY_UP();
 8000dc4:	f7ff fb7d 	bl	80004c2 <GPIOE_PURDR_BUSY_UP>
	GPIOD_MODER_DIO_INPUT();
 8000dc8:	f7ff fb8f 	bl	80004ea <GPIOD_MODER_DIO_INPUT>
	GPIOD_PUPDR_DIO_NPUPD();
 8000dcc:	f7ff fb98 	bl	8000500 <GPIOD_PUPDR_DIO_NPUPD>

	RCC_init();
 8000dd0:	f000 f8ac 	bl	8000f2c <RCC_init>
	TIM8_init();
 8000dd4:	f000 f918 	bl	8001008 <TIM8_init>
	SPI_init();
 8000dd8:	f000 f8e8 	bl	8000fac <SPI_init>

	NVIC_Interupts_Enable();
 8000ddc:	f000 f81e 	bl	8000e1c <NVIC_Interupts_Enable>

	tx_buffer[0] = Opcode;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <main+0x58>)
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <main+0x5c>)
 8000de6:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = STDBY_RC;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <main+0x60>)
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <main+0x5c>)
 8000dee:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = '$';
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <main+0x5c>)
 8000df2:	2224      	movs	r2, #36	@ 0x24
 8000df4:	709a      	strb	r2, [r3, #2]
	ptr_tx_buffer = tx_buffer;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <main+0x64>)
 8000df8:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <main+0x5c>)
 8000dfa:	601a      	str	r2, [r3, #0]

//	ASM_SPI_CR1_SSI_1();
	TIM8_start();
 8000dfc:	f000 f922 	bl	8001044 <TIM8_start>
//
//	ASM_SPI_CR1_SSI_1();
//	ASM_SPI_CR1_SSI_0();

	//SPI_start();
	ASM_SPI_CR1_SPE_1(); //enable spi
 8000e00:	f7ff fe76 	bl	8000af0 <ASM_SPI_CR1_SPE_1>
	ASM_SPI_CR1_SSI_0(); //select slave
 8000e04:	f7ff fe9d 	bl	8000b42 <ASM_SPI_CR1_SSI_0>
	//ASM_SPI_CR1_CSTART_1(); //start spi

	while(1){
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <main+0x54>
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000084 	.word	0x20000084
 8000e14:	20000080 	.word	0x20000080
 8000e18:	2000007c 	.word	0x2000007c

08000e1c <NVIC_Interupts_Enable>:
//		}

	}
}

void NVIC_Interupts_Enable(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	NVIC_TIM8_Enable_Interupt();
 8000e20:	f7ff fb86 	bl	8000530 <NVIC_TIM8_Enable_Interupt>
	NVIC_SPI1_Enable_Interupt();
 8000e24:	f7ff fb8b 	bl	800053e <NVIC_SPI1_Enable_Interupt>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <TIM8_UP_IRQHandler>:

int tim_flag = 0;
void TIM8_UP_IRQHandler(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	if(TIM8_Get_SR_Status() & 0x1){  //UIF on
 8000e30:	f7ff ff6a 	bl	8000d08 <TIM8_Get_SR_Status>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <TIM8_UP_IRQHandler+0x22>
		TIM8_Clear_UIF_Flag();
 8000e3e:	f7ff fed1 	bl	8000be4 <TIM8_Clear_UIF_Flag>
		tim_flag ^= 1;
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <TIM8_UP_IRQHandler+0x28>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f083 0301 	eor.w	r3, r3, #1
 8000e4a:	4a02      	ldr	r2, [pc, #8]	@ (8000e54 <TIM8_UP_IRQHandler+0x28>)
 8000e4c:	6013      	str	r3, [r2, #0]
		//printf("%i \n", tim_flag);
	}
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000008c 	.word	0x2000008c

08000e58 <SPI1_IRQHandler>:

void SPI1_IRQHandler(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	* In master, EOT event terminates the data transaction and handles SS output optionally.
	* When CRC is applied, the EOT event is extended over the CRC frame transaction.
	* To restart the internal state machine properly, SPI is strongly suggested to be disabled and
	* re-enabled before next transaction starts despite its setting is not changed.
	*/
	if(ASM_SPI_SR_Get() & (0x1U << 3)){
 8000e5e:	f7ff fd4a 	bl	80008f6 <ASM_SPI_SR_Get>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <SPI1_IRQHandler+0x1e>
		printf("transfer complete.\n");
 8000e6c:	4827      	ldr	r0, [pc, #156]	@ (8000f0c <SPI1_IRQHandler+0xb4>)
 8000e6e:	f000 fa2f 	bl	80012d0 <puts>
//		ASM_SPI_CR1_SSI_1();
		ASM_SPI_IFCR_EOTC_Clear();
 8000e72:	f7ff fd46 	bl	8000902 <ASM_SPI_IFCR_EOTC_Clear>
	* communication flow. If the data packet is stored by performing consecutive write operations
	* to SPI_TXDR, TXP flag must be checked again once a complete data packet is stored at
	* TxFIFO. TXP is set despite SPI TxFIFO becomes inaccessible when SPI is reset or
	* disabled.
	*/
	if(ASM_SPI_SR_Get() & (0x1U << 1)){
 8000e76:	f7ff fd3e 	bl	80008f6 <ASM_SPI_SR_Get>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d011      	beq.n	8000ea8 <SPI1_IRQHandler+0x50>
		printf("Data packet space available\n");
 8000e84:	4822      	ldr	r0, [pc, #136]	@ (8000f10 <SPI1_IRQHandler+0xb8>)
 8000e86:	f000 fa23 	bl	80012d0 <puts>

		if(ptr_tx_buffer != NULL){
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <SPI1_IRQHandler+0xbc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00d      	beq.n	8000eae <SPI1_IRQHandler+0x56>
			//ASM_SPI_CR1_SSI_0();
			for(int i = 0; i<2000; i++){}
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	e002      	b.n	8000e9e <SPI1_IRQHandler+0x46>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ea4:	dbf8      	blt.n	8000e98 <SPI1_IRQHandler+0x40>
 8000ea6:	e002      	b.n	8000eae <SPI1_IRQHandler+0x56>
			//ptr_tx_buffer++;
		}

	}
	else{
		printf("Data packet space NOT available\n");
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <SPI1_IRQHandler+0xc0>)
 8000eaa:	f000 fa11 	bl	80012d0 <puts>
	}

	//Bit 6 OVR: overrun
	if(ASM_SPI_SR_Get() & (0x1U << 6)){
 8000eae:	f7ff fd22 	bl	80008f6 <ASM_SPI_SR_Get>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <SPI1_IRQHandler+0x6e>
		printf("Overrun.\n");
 8000ebc:	4817      	ldr	r0, [pc, #92]	@ (8000f1c <SPI1_IRQHandler+0xc4>)
 8000ebe:	f000 fa07 	bl	80012d0 <puts>
		ASM_SPI_IFCR_OVRC();
 8000ec2:	f7ff fd28 	bl	8000916 <ASM_SPI_IFCR_OVRC>
	* This bit is cleared by software write 1 to TXTFC bit of SPI_IFCR exclusively.
	* TXTF flag triggers an interrupt if TXTFIE bit is set.
	* TXTF setting clears the TXPIE and DXPIE masks so to off-load application software from
	* calculating when to disable TXP and DXP interrupts.
	*/
	if(ASM_SPI_SR_Get() & (0x1U << 4)){
 8000ec6:	f7ff fd16 	bl	80008f6 <ASM_SPI_SR_Get>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00e      	beq.n	8000ef2 <SPI1_IRQHandler+0x9a>
		printf("TxFIFO upload is finished.\n");
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <SPI1_IRQHandler+0xc8>)
 8000ed6:	f000 f9fb 	bl	80012d0 <puts>
		ASM_SPI_IFCR_TXTFC();
 8000eda:	f7ff fd26 	bl	800092a <ASM_SPI_IFCR_TXTFC>
	* RxFIFO if SPI is enabled. RXP value depends on the FIFO threshold (FTHLV[3:0]), data
	* frame size (DSIZE[4:0] in SPI mode), and actual communication flow. If the data packet is
	* read by performing consecutive read operations from SPI_RXDR, RXP flag must be
	* checked again once a complete data packet is read out from RxFIFO.
	*/
	while(ASM_SPI_SR_Get() & (0x1U)){
 8000ede:	e008      	b.n	8000ef2 <SPI1_IRQHandler+0x9a>
		rx_buffer = ASM_SPI_RXDR_Get();
 8000ee0:	f7ff fe42 	bl	8000b68 <ASM_SPI_RXDR_Get>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <SPI1_IRQHandler+0xcc>)
 8000eea:	601a      	str	r2, [r3, #0]
		printf("RxFIFO contains at least one data packet\n");
 8000eec:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <SPI1_IRQHandler+0xd0>)
 8000eee:	f000 f9ef 	bl	80012d0 <puts>
	while(ASM_SPI_SR_Get() & (0x1U)){
 8000ef2:	f7ff fd00 	bl	80008f6 <ASM_SPI_SR_Get>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ef      	bne.n	8000ee0 <SPI1_IRQHandler+0x88>
//		ASM_SPI_CR1_SSI_1(); //unselect slave
//		ASM_SPI_CR1_SPE_0(); //disable SPI1
	}

}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08001a70 	.word	0x08001a70
 8000f10:	08001a84 	.word	0x08001a84
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	08001aa0 	.word	0x08001aa0
 8000f1c:	08001ac0 	.word	0x08001ac0
 8000f20:	08001acc 	.word	0x08001acc
 8000f24:	20000088 	.word	0x20000088
 8000f28:	08001ae8 	.word	0x08001ae8

08000f2c <RCC_init>:

void RCC_init(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	ASM_RCC_CR_HSI16();
 8000f30:	f7ff fbe2 	bl	80006f8 <ASM_RCC_CR_HSI16>
	while(!ASM_RCC_CR_HSI16RDY());
 8000f34:	bf00      	nop
 8000f36:	f7ff fbe6 	bl	8000706 <ASM_RCC_CR_HSI16RDY>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0fa      	beq.n	8000f36 <RCC_init+0xa>

	ASM_RCC_PLL1CFGR_PLL1SRC_HSI16();
 8000f40:	f7ff fc35 	bl	80007ae <ASM_RCC_PLL1CFGR_PLL1SRC_HSI16>
	ASM_RCC_PLL1CFGR_PLL1M_3();
 8000f44:	f7ff fc5d 	bl	8000802 <ASM_RCC_PLL1CFGR_PLL1M_3>
	ASM_RCC_PLL1DIVR_PLL1N_4();
 8000f48:	f7ff fc69 	bl	800081e <ASM_RCC_PLL1DIVR_PLL1N_4>
	ASM_RCC_PLL1CFGR_PLL1REN();
 8000f4c:	f7ff fc4f 	bl	80007ee <ASM_RCC_PLL1CFGR_PLL1REN>
	ASM_RCC_PLL1CFGR_PLL1PEN();
 8000f50:	f7ff fc39 	bl	80007c6 <ASM_RCC_PLL1CFGR_PLL1PEN>
	ASM_RCC_PLL1CFGR_PLL1QEN();
 8000f54:	f7ff fc41 	bl	80007da <ASM_RCC_PLL1CFGR_PLL1QEN>


	ASM_RCC_CR_PLL1();
 8000f58:	f7ff fc1c 	bl	8000794 <ASM_RCC_CR_PLL1>
	while(!ASM_RCC_CR_PLL1RDY());
 8000f5c:	bf00      	nop
 8000f5e:	f7ff fc20 	bl	80007a2 <ASM_RCC_CR_PLL1RDY>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0fa      	beq.n	8000f5e <RCC_init+0x32>

	//Activate MCO gpio pin PA8
	ASM_RCC_AHB2ENR1_GPIOAEN_Set();
 8000f68:	f7ff fb06 	bl	8000578 <ASM_RCC_AHB2ENR1_GPIOAEN_Set>
	GPIOA_MODER_Set_Alt_Function();
 8000f6c:	f7ff fa71 	bl	8000452 <GPIOA_MODER_Set_Alt_Function>
	GPIOA_AFRH_Set_Alt_Function();
 8000f70:	f7ff fa7d 	bl	800046e <GPIOA_AFRH_Set_Alt_Function>
	GPIOA_OSPEEDR_Set();
 8000f74:	f7ff fa85 	bl	8000482 <GPIOA_OSPEEDR_Set>

	// Read clock frequency
			//ASM_RCC_CFGR1_MCOSEL_HSIor STM32U516();
			//ASM_RCC_CFGR1_MCOSEL_HSI48();
	 ASM_RCC_CFGR1_MCOSEL_SYSCLK();
 8000f78:	f7ff fb94 	bl	80006a4 <ASM_RCC_CFGR1_MCOSEL_SYSCLK>
			//ASM_RCC_CFGR1_MCOSEL_HSE();
			//ASM_RCC_CFGR1_MCOSEL_PLL1();

//	  ASM_RCC_CFGR1_SW_PLL1();
//	  while(!(ASM_RCC_CFGR1_SWS() & 0x3U));
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <GPIO_SPI_init>:

void GPIO_SPI_init(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	ASM_RCC_AHB2ENR1_GPIOEEN_Set();
 8000f84:	f7ff faee 	bl	8000564 <ASM_RCC_AHB2ENR1_GPIOEEN_Set>
	ASM_RCC_AHB2ENR1_GPIODEN_Set();
 8000f88:	f7ff faff 	bl	800058a <ASM_RCC_AHB2ENR1_GPIODEN_Set>

	//Configure GPIOE
	GPIOE_MODER_Set_Alt_Function();
 8000f8c:	f7ff f974 	bl	8000278 <GPIOE_MODER_Set_Alt_Function>
	GPIOE_AFRH_Set_Alt_Function();
 8000f90:	f7ff f99c 	bl	80002cc <GPIOE_AFRH_Set_Alt_Function>
	GPIOE_OSPEEDR_Set();
 8000f94:	f7ff f9c4 	bl	8000320 <GPIOE_OSPEEDR_Set>
  //GPIOE_PUPDR_Set();

	GPIOE_PUPDR_MOSI_UP();
 8000f98:	f7ff fa45 	bl	8000426 <GPIOE_PUPDR_MOSI_UP>
  //GPIOE_PUPDR_MOSI_DOWN();
	GPIOE_PUPDR_MISO_UP();
 8000f9c:	f7ff fa2f 	bl	80003fe <GPIOE_PUPDR_MISO_UP>
  //** GPIO_PUPDR_SCK register bit value gets overwritten by SPI_CPOL bit (clock polarity)
  //GPIOE_PUPDR_SCK_UP();
  //GPIOE_PUPDR_CLEAR(26);
  //GPIOE_PUPDR_SCK_DOWN();
  //** GPIOE_PUPDR_NSS register bit value gets overwritten by SPI_SSIOP bit (SS input/output polarity)
	GPIOE_PUPDR_NSS_UP();
 8000fa0:	f7ff fa05 	bl	80003ae <GPIOE_PUPDR_NSS_UP>
  //GPIOE_PUPDR_NSS_DOWN();
	//GPIOE_PUPDR_RDY_UP();
    GPIOE_PUPDR_RDY_DOWN();
 8000fa4:	f7ff f9e5 	bl	8000372 <GPIOE_PUPDR_RDY_DOWN>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SPI_init>:

void SPI_init(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	/**
	 * Configure GPIO pins for SPI
	 */

	GPIO_SPI_init();
 8000fb0:	f7ff ffe6 	bl	8000f80 <GPIO_SPI_init>
	/**
	 * Select clock for SPI
	 */

		//ASM_RCC_CCIPR1_SPI1SEL_HSI16();
	ASM_RCC_CCIPR1_SPI1SEL_PCLK2();
 8000fb4:	f7ff fb0b 	bl	80005ce <ASM_RCC_CCIPR1_SPI1SEL_PCLK2>
	  //ASM_RCC_CCIPR1_SPI1SEL_SYSCLK();
	  //ASM_RCC_CFGR2_HPRE_2();
	  //ASM_RCC_CFGR2_PCLK2_2();
	ASM_RCC_APB2ENR_SPI1_Set();
 8000fb8:	f7ff faf1 	bl	800059e <ASM_RCC_APB2ENR_SPI1_Set>
	/**
	 * SSIOP: SS input/output polarity.
	 * 0: low level is active for SS signal
	 * 1: high level is active for SS signal
	 */
	ASM_SPI_CFG2_SSIOP_0();
 8000fbc:	f7ff fdda 	bl	8000b74 <ASM_SPI_CFG2_SSIOP_0>
	 * 0: SS is kept at active level till data transfer is completed,
	 *    it becomes inactive with with EOT flag
	 * 1: SPI data frames are interleaved with SS non active pulses when MIDI[3:0]>1
	 */
	//ASM_SPI_CFG2_SSOM_1();	//SS output management, interleave with non-active pulse
    ASM_SPI_CFG2_SSOM_0(); //SS output management, SS keep active till EOT flag
 8000fc0:	f7ff fd33 	bl	8000a2a <ASM_SPI_CFG2_SSOM_0>
	 * 0001: 1 clock cycle period delay
	 * ...
	 * 1111: 15 clock cycle periods delay
	 * Note: This feature is not supported in TI mode.
	 */
	ASM_SPI_CFG2_MIDI_Set();
 8000fc4:	f7ff fd3c 	bl	8000a40 <ASM_SPI_CFG2_MIDI_Set>
	 * When master uses hardware SS output (SSM = 0 and SSOE = 1)
	 * the SS signal input is forced to not active state internally
	 * to prevent master mode fault error.
	 */
  //ASM_SPI_CFG2_SSM_0();
    ASM_SPI_CFG2_SSM_1();
 8000fc8:	f7ff fd02 	bl	80009d0 <ASM_SPI_CFG2_SSM_1>
	 * 0: SS output is disabled and the SPI can work in multimaster configuration
	 * 1: SS output is enabled. The SPI cannot work in a multimaster environment.
	 * It forces the SS pin at inactive level after the transfer is completed
	 * or SPI is disabled with respect to SSOM, MIDI, MSSI, SSIOP bits setting
	 */
	ASM_SPI_CFG2_SSOE_1();	//SS output enabled(master mode only)
 8000fcc:	f7ff fd0a 	bl	80009e4 <ASM_SPI_CFG2_SSOE_1>
	/**
	 * Bit 22 MASTER: SPI Master
	 * 0: SPI Slave
	 * 1: SPI Master
	 */
	ASM_SPI_CFG2_MASTER_Set();
 8000fd0:	f7ff fcbe 	bl	8000950 <ASM_SPI_CFG2_MASTER_Set>
	 * 00: full-duplex
	 * 01: simplex transmitter
	 * 10: simplex receiver
	 * 11: half-duplex
	 */
	ASM_SPI_CFG2_COMM_Full_Duplex();
 8000fd4:	f7ff fcc6 	bl	8000964 <ASM_SPI_CFG2_COMM_Full_Duplex>
	/**
	 * Bit 25 CPOL: clock polarity
	 * 0: SCK signal is at 0 when idle
	 * 1: SCK signal is at 1 when idle
	 */
	ASM_SPI_CFG2_CPOL_0();
 8000fd8:	f7ff fccf 	bl	800097a <ASM_SPI_CFG2_CPOL_0>
	/**
	 * Bit 24 CPHA: clock phase
	 * 0: the first clock transition is the first data capture edge
	 * 1: the second clock transition is the first data capture edge
	 */
	ASM_SPI_CFG2_CPHA_0();
 8000fdc:	f7ff fce2 	bl	80009a4 <ASM_SPI_CFG2_CPHA_0>
	 * .....
	 * 11101: 30 bits
	 * 11110: 31 bits
	 * 11111: 32 bits
	 */
	ASM_SPI_CFG1_DSIZE_8();
 8000fe0:	f7ff fd0a 	bl	80009f8 <ASM_SPI_CFG1_DSIZE_8>
	* FTHLV = 2, 4, 6.
	* – If SPI data register is accessed as a 32-bit register and DSIZE> 8 bit, better to select
	* FTHLV = 2, 4, 6, while if DSIZE ≤ 8bit, better to select FTHLV = 4, 8, 12.
	* Note: FTHLV[3:2] bits are reserved at instances with limited set of features
	*/
	ASM_SPI_CFG1_FTHLV_2();
 8000fe4:	f7ff fd09 	bl	80009fa <ASM_SPI_CFG1_FTHLV_2>
	 * Bit 31 BPASS: bypass of the prescaler at master baud rate clock generator
	 * 0: bypass is disabled
	 * 1: bypass is enabled
	 */
  //ASM_SPI_CFG1_BPASS_0();
	ASM_SPI_CFG1_BPASS_1();
 8000fe8:	f7ff fd59 	bl	8000a9e <ASM_SPI_CFG1_BPASS_1>
	/**
	 * Bit 23 LSBFRST: data frame format
	 * 0: MSB transmitted first
	 * 1: LSB transmitted first
	 */
	ASM_SPI_CFG2_LSBFRST_MSB();
 8000fec:	f7ff fd61 	bl	8000ab2 <ASM_SPI_CFG2_LSBFRST_MSB>
	* Endless transaction is initialized when CSTART is set while zero value is stored at TSIZE.
	* TSIZE cannot be set to 0xFFFF respective 0x3FFF value when CRC is enabled.
	* Note: TSIZE[15:10] bits are reserved at limited feature set instances and must be kept at reset
	* value.
	*/
	ASM_SPI_CR2_TSIZE();
 8000ff0:	f7ff fca5 	bl	800093e <ASM_SPI_CR2_TSIZE>

	//ASM_SPI_CFG2_RDIOM_1_SIMULATE_RDY();

	//Enable interrupts on SPI1
	ASM_SPI_IER_EOTIE_Set();
 8000ff4:	f7ff fc58 	bl	80008a8 <ASM_SPI_IER_EOTIE_Set>
	ASM_SPI_IER_TXPIE_Set();
 8000ff8:	f7ff fc60 	bl	80008bc <ASM_SPI_IER_TXPIE_Set>
	ASM_SPI_IER_TXTFIE_Set();
 8000ffc:	f7ff fc71 	bl	80008e2 <ASM_SPI_IER_TXTFIE_Set>
	ASM_SPI_IER_RXPIE_Set();
 8001000:	f7ff fc66 	bl	80008d0 <ASM_SPI_IER_RXPIE_Set>

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <TIM8_init>:
	 * only if any data is available 	 * in the transmission FIFO.
	*/
	ASM_SPI_CR1_CSTART_1();
}

void TIM8_init(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

	ASM_RCC_APB2ENR_TIM8EN_Set();
 800100c:	f7ff faa0 	bl	8000550 <ASM_RCC_APB2ENR_TIM8EN_Set>
	//configure TIM2 timer
	TIM8_Set_PSC_Value();
 8001010:	f7ff fdd2 	bl	8000bb8 <TIM8_Set_PSC_Value>
	TIM8_Set_ARR_Value();
 8001014:	f7ff fdda 	bl	8000bcc <TIM8_Set_ARR_Value>
	TIM8_Clear_UIF_Flag();
 8001018:	f7ff fde4 	bl	8000be4 <TIM8_Clear_UIF_Flag>
	TIM8_Set_CCnS_To_Channel_Output();
 800101c:	f7ff fdec 	bl	8000bf8 <TIM8_Set_CCnS_To_Channel_Output>
	TIM8_Set_DITHEN_False();
 8001020:	f7ff fdf5 	bl	8000c0e <TIM8_Set_DITHEN_False>
	TIM8_Set_CCRn_WaveGen_Value();
 8001024:	f7ff fdfe 	bl	8000c24 <TIM8_Set_CCRn_WaveGen_Value>
	TIM8_Set_DIR_UpCounter();
 8001028:	f7ff fe13 	bl	8000c52 <TIM8_Set_DIR_UpCounter>
	TIM8_Set_MMS_Update_Trigger_Output();
 800102c:	f7ff fe4b 	bl	8000cc6 <TIM8_Set_MMS_Update_Trigger_Output>
	//TIM8_Set_OCnM_To_Toggle_Mode();
	TIM8_Set_CC1P_Polarity_ActiveHigh();
 8001030:	f7ff fe2c 	bl	8000c8c <TIM8_Set_CC1P_Polarity_ActiveHigh>
	TIM8_Set_CCnE_Output_Enable_To_GPIO();
 8001034:	f7ff fe35 	bl	8000ca2 <TIM8_Set_CCnE_Output_Enable_To_GPIO>
	TIM8_Set_UIF_Update_Interrupt_Enable();
 8001038:	f7ff fe53 	bl	8000ce2 <TIM8_Set_UIF_Update_Interrupt_Enable>
	TIM8_Set_CC1IE_Update_Interrupt_Enable();
 800103c:	f7ff fe5a 	bl	8000cf4 <TIM8_Set_CC1IE_Update_Interrupt_Enable>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <TIM8_start>:

void TIM8_start(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	TIM8_Set_CEN_Counter_Enable();
 8001048:	f7ff fe34 	bl	8000cb4 <TIM8_Set_CEN_Counter_Enable>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001050:	f8df d030 	ldr.w	sp, [pc, #48]	@ 8001084 <LoopForever+0x2>
/* Call the clock system initialization function.*/
//  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001054:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001056:	e003      	b.n	8001060 <LoopCopyDataInit>

08001058 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800105a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800105c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800105e:	3104      	adds	r1, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001064:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001066:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001068:	d3f6      	bcc.n	8001058 <CopyDataInit>
	ldr	r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopForever+0x12>)
	b	LoopFillZerobss
 800106c:	e002      	b.n	8001074 <LoopFillZerobss>

0800106e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800106e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001070:	f842 3b04 	str.w	r3, [r2], #4

08001074 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <LoopForever+0x16>)
	cmp	r2, r3
 8001076:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001078:	d3f9      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f000 fa57 	bl	800152c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107e:	f7ff fe99 	bl	8000db4 <main>

08001082 <LoopForever>:

LoopForever:
    b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001084:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001088:	08001b1c 	.word	0x08001b1c
	ldr	r0, =_sdata
 800108c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001090:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8001094:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 8001098:	200001e0 	.word	0x200001e0

0800109c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_IRQHandler>
	...

080010a0 <std>:
 80010a0:	2300      	movs	r3, #0
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
 80010a6:	6083      	str	r3, [r0, #8]
 80010a8:	8181      	strh	r1, [r0, #12]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6643      	str	r3, [r0, #100]	@ 0x64
 80010ae:	81c2      	strh	r2, [r0, #14]
 80010b0:	2208      	movs	r2, #8
 80010b2:	6183      	str	r3, [r0, #24]
 80010b4:	e9c0 3300 	strd	r3, r3, [r0]
 80010b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010bc:	305c      	adds	r0, #92	@ 0x5c
 80010be:	f000 f9e7 	bl	8001490 <memset>
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <std+0x58>)
 80010c4:	6224      	str	r4, [r4, #32]
 80010c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <std+0x5c>)
 80010ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <std+0x60>)
 80010ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <std+0x64>)
 80010d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <std+0x68>)
 80010d6:	429c      	cmp	r4, r3
 80010d8:	d006      	beq.n	80010e8 <std+0x48>
 80010da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80010de:	4294      	cmp	r4, r2
 80010e0:	d002      	beq.n	80010e8 <std+0x48>
 80010e2:	33d0      	adds	r3, #208	@ 0xd0
 80010e4:	429c      	cmp	r4, r3
 80010e6:	d105      	bne.n	80010f4 <std+0x54>
 80010e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80010ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010f0:	f000 ba40 	b.w	8001574 <__retarget_lock_init_recursive>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	080012e1 	.word	0x080012e1
 80010fc:	08001303 	.word	0x08001303
 8001100:	0800133b 	.word	0x0800133b
 8001104:	0800135f 	.word	0x0800135f
 8001108:	20000090 	.word	0x20000090

0800110c <stdio_exit_handler>:
 800110c:	4a02      	ldr	r2, [pc, #8]	@ (8001118 <stdio_exit_handler+0xc>)
 800110e:	4903      	ldr	r1, [pc, #12]	@ (800111c <stdio_exit_handler+0x10>)
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <stdio_exit_handler+0x14>)
 8001112:	f000 b869 	b.w	80011e8 <_fwalk_sglue>
 8001116:	bf00      	nop
 8001118:	20000004 	.word	0x20000004
 800111c:	08001875 	.word	0x08001875
 8001120:	20000014 	.word	0x20000014

08001124 <cleanup_stdio>:
 8001124:	6841      	ldr	r1, [r0, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <cleanup_stdio+0x34>)
 8001128:	4299      	cmp	r1, r3
 800112a:	b510      	push	{r4, lr}
 800112c:	4604      	mov	r4, r0
 800112e:	d001      	beq.n	8001134 <cleanup_stdio+0x10>
 8001130:	f000 fba0 	bl	8001874 <_fflush_r>
 8001134:	68a1      	ldr	r1, [r4, #8]
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <cleanup_stdio+0x38>)
 8001138:	4299      	cmp	r1, r3
 800113a:	d002      	beq.n	8001142 <cleanup_stdio+0x1e>
 800113c:	4620      	mov	r0, r4
 800113e:	f000 fb99 	bl	8001874 <_fflush_r>
 8001142:	68e1      	ldr	r1, [r4, #12]
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <cleanup_stdio+0x3c>)
 8001146:	4299      	cmp	r1, r3
 8001148:	d004      	beq.n	8001154 <cleanup_stdio+0x30>
 800114a:	4620      	mov	r0, r4
 800114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001150:	f000 bb90 	b.w	8001874 <_fflush_r>
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090
 800115c:	200000f8 	.word	0x200000f8
 8001160:	20000160 	.word	0x20000160

08001164 <global_stdio_init.part.0>:
 8001164:	b510      	push	{r4, lr}
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <global_stdio_init.part.0+0x30>)
 8001168:	2104      	movs	r1, #4
 800116a:	4c0b      	ldr	r4, [pc, #44]	@ (8001198 <global_stdio_init.part.0+0x34>)
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <global_stdio_init.part.0+0x38>)
 800116e:	4620      	mov	r0, r4
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff ff94 	bl	80010a0 <std>
 8001178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800117c:	2201      	movs	r2, #1
 800117e:	2109      	movs	r1, #9
 8001180:	f7ff ff8e 	bl	80010a0 <std>
 8001184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001188:	2202      	movs	r2, #2
 800118a:	2112      	movs	r1, #18
 800118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001190:	f7ff bf86 	b.w	80010a0 <std>
 8001194:	200001c8 	.word	0x200001c8
 8001198:	20000090 	.word	0x20000090
 800119c:	0800110d 	.word	0x0800110d

080011a0 <__sfp_lock_acquire>:
 80011a0:	4801      	ldr	r0, [pc, #4]	@ (80011a8 <__sfp_lock_acquire+0x8>)
 80011a2:	f000 b9e8 	b.w	8001576 <__retarget_lock_acquire_recursive>
 80011a6:	bf00      	nop
 80011a8:	200001d1 	.word	0x200001d1

080011ac <__sfp_lock_release>:
 80011ac:	4801      	ldr	r0, [pc, #4]	@ (80011b4 <__sfp_lock_release+0x8>)
 80011ae:	f000 b9e3 	b.w	8001578 <__retarget_lock_release_recursive>
 80011b2:	bf00      	nop
 80011b4:	200001d1 	.word	0x200001d1

080011b8 <__sinit>:
 80011b8:	b510      	push	{r4, lr}
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff fff0 	bl	80011a0 <__sfp_lock_acquire>
 80011c0:	6a23      	ldr	r3, [r4, #32]
 80011c2:	b11b      	cbz	r3, 80011cc <__sinit+0x14>
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011c8:	f7ff bff0 	b.w	80011ac <__sfp_lock_release>
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__sinit+0x28>)
 80011ce:	6223      	str	r3, [r4, #32]
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__sinit+0x2c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f5      	bne.n	80011c4 <__sinit+0xc>
 80011d8:	f7ff ffc4 	bl	8001164 <global_stdio_init.part.0>
 80011dc:	e7f2      	b.n	80011c4 <__sinit+0xc>
 80011de:	bf00      	nop
 80011e0:	08001125 	.word	0x08001125
 80011e4:	200001c8 	.word	0x200001c8

080011e8 <_fwalk_sglue>:
 80011e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011ec:	4607      	mov	r7, r0
 80011ee:	4688      	mov	r8, r1
 80011f0:	4614      	mov	r4, r2
 80011f2:	2600      	movs	r6, #0
 80011f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011f8:	f1b9 0901 	subs.w	r9, r9, #1
 80011fc:	d505      	bpl.n	800120a <_fwalk_sglue+0x22>
 80011fe:	6824      	ldr	r4, [r4, #0]
 8001200:	2c00      	cmp	r4, #0
 8001202:	d1f7      	bne.n	80011f4 <_fwalk_sglue+0xc>
 8001204:	4630      	mov	r0, r6
 8001206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800120a:	89ab      	ldrh	r3, [r5, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d907      	bls.n	8001220 <_fwalk_sglue+0x38>
 8001210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001214:	3301      	adds	r3, #1
 8001216:	d003      	beq.n	8001220 <_fwalk_sglue+0x38>
 8001218:	4629      	mov	r1, r5
 800121a:	4638      	mov	r0, r7
 800121c:	47c0      	blx	r8
 800121e:	4306      	orrs	r6, r0
 8001220:	3568      	adds	r5, #104	@ 0x68
 8001222:	e7e9      	b.n	80011f8 <_fwalk_sglue+0x10>

08001224 <_puts_r>:
 8001224:	6a03      	ldr	r3, [r0, #32]
 8001226:	b570      	push	{r4, r5, r6, lr}
 8001228:	4605      	mov	r5, r0
 800122a:	460e      	mov	r6, r1
 800122c:	6884      	ldr	r4, [r0, #8]
 800122e:	b90b      	cbnz	r3, 8001234 <_puts_r+0x10>
 8001230:	f7ff ffc2 	bl	80011b8 <__sinit>
 8001234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001236:	07db      	lsls	r3, r3, #31
 8001238:	d405      	bmi.n	8001246 <_puts_r+0x22>
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	0598      	lsls	r0, r3, #22
 800123e:	d402      	bmi.n	8001246 <_puts_r+0x22>
 8001240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001242:	f000 f998 	bl	8001576 <__retarget_lock_acquire_recursive>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	0719      	lsls	r1, r3, #28
 800124a:	d502      	bpl.n	8001252 <_puts_r+0x2e>
 800124c:	6923      	ldr	r3, [r4, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d135      	bne.n	80012be <_puts_r+0x9a>
 8001252:	4621      	mov	r1, r4
 8001254:	4628      	mov	r0, r5
 8001256:	f000 f8c5 	bl	80013e4 <__swsetup_r>
 800125a:	b380      	cbz	r0, 80012be <_puts_r+0x9a>
 800125c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001262:	07da      	lsls	r2, r3, #31
 8001264:	d405      	bmi.n	8001272 <_puts_r+0x4e>
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	059b      	lsls	r3, r3, #22
 800126a:	d402      	bmi.n	8001272 <_puts_r+0x4e>
 800126c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800126e:	f000 f983 	bl	8001578 <__retarget_lock_release_recursive>
 8001272:	4628      	mov	r0, r5
 8001274:	bd70      	pop	{r4, r5, r6, pc}
 8001276:	2b00      	cmp	r3, #0
 8001278:	da04      	bge.n	8001284 <_puts_r+0x60>
 800127a:	69a2      	ldr	r2, [r4, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	dc17      	bgt.n	80012b0 <_puts_r+0x8c>
 8001280:	290a      	cmp	r1, #10
 8001282:	d015      	beq.n	80012b0 <_puts_r+0x8c>
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	6022      	str	r2, [r4, #0]
 800128a:	7019      	strb	r1, [r3, #0]
 800128c:	68a3      	ldr	r3, [r4, #8]
 800128e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001292:	3b01      	subs	r3, #1
 8001294:	60a3      	str	r3, [r4, #8]
 8001296:	2900      	cmp	r1, #0
 8001298:	d1ed      	bne.n	8001276 <_puts_r+0x52>
 800129a:	2b00      	cmp	r3, #0
 800129c:	da11      	bge.n	80012c2 <_puts_r+0x9e>
 800129e:	4622      	mov	r2, r4
 80012a0:	210a      	movs	r1, #10
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 f85f 	bl	8001366 <__swbuf_r>
 80012a8:	3001      	adds	r0, #1
 80012aa:	d0d7      	beq.n	800125c <_puts_r+0x38>
 80012ac:	250a      	movs	r5, #10
 80012ae:	e7d7      	b.n	8001260 <_puts_r+0x3c>
 80012b0:	4622      	mov	r2, r4
 80012b2:	4628      	mov	r0, r5
 80012b4:	f000 f857 	bl	8001366 <__swbuf_r>
 80012b8:	3001      	adds	r0, #1
 80012ba:	d1e7      	bne.n	800128c <_puts_r+0x68>
 80012bc:	e7ce      	b.n	800125c <_puts_r+0x38>
 80012be:	3e01      	subs	r6, #1
 80012c0:	e7e4      	b.n	800128c <_puts_r+0x68>
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	6022      	str	r2, [r4, #0]
 80012c8:	220a      	movs	r2, #10
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e7ee      	b.n	80012ac <_puts_r+0x88>
	...

080012d0 <puts>:
 80012d0:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <puts+0xc>)
 80012d2:	4601      	mov	r1, r0
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f7ff bfa5 	b.w	8001224 <_puts_r>
 80012da:	bf00      	nop
 80012dc:	20000010 	.word	0x20000010

080012e0 <__sread>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	460c      	mov	r4, r1
 80012e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e8:	f000 f8fc 	bl	80014e4 <_read_r>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	bfab      	itete	ge
 80012f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80012f2:	89a3      	ldrhlt	r3, [r4, #12]
 80012f4:	181b      	addge	r3, r3, r0
 80012f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80012fa:	bfac      	ite	ge
 80012fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80012fe:	81a3      	strhlt	r3, [r4, #12]
 8001300:	bd10      	pop	{r4, pc}

08001302 <__swrite>:
 8001302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001306:	461f      	mov	r7, r3
 8001308:	898b      	ldrh	r3, [r1, #12]
 800130a:	4605      	mov	r5, r0
 800130c:	460c      	mov	r4, r1
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	4616      	mov	r6, r2
 8001312:	d505      	bpl.n	8001320 <__swrite+0x1e>
 8001314:	2302      	movs	r3, #2
 8001316:	2200      	movs	r2, #0
 8001318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800131c:	f000 f8d0 	bl	80014c0 <_lseek_r>
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	4632      	mov	r2, r6
 8001324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001328:	4628      	mov	r0, r5
 800132a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800132e:	81a3      	strh	r3, [r4, #12]
 8001330:	463b      	mov	r3, r7
 8001332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	f000 b8e7 	b.w	8001508 <_write_r>

0800133a <__sseek>:
 800133a:	b510      	push	{r4, lr}
 800133c:	460c      	mov	r4, r1
 800133e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001342:	f000 f8bd 	bl	80014c0 <_lseek_r>
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	bf15      	itete	ne
 800134c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800134e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001356:	81a3      	strheq	r3, [r4, #12]
 8001358:	bf18      	it	ne
 800135a:	81a3      	strhne	r3, [r4, #12]
 800135c:	bd10      	pop	{r4, pc}

0800135e <__sclose>:
 800135e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001362:	f000 b89d 	b.w	80014a0 <_close_r>

08001366 <__swbuf_r>:
 8001366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001368:	460e      	mov	r6, r1
 800136a:	4614      	mov	r4, r2
 800136c:	4605      	mov	r5, r0
 800136e:	b118      	cbz	r0, 8001378 <__swbuf_r+0x12>
 8001370:	6a03      	ldr	r3, [r0, #32]
 8001372:	b90b      	cbnz	r3, 8001378 <__swbuf_r+0x12>
 8001374:	f7ff ff20 	bl	80011b8 <__sinit>
 8001378:	69a3      	ldr	r3, [r4, #24]
 800137a:	60a3      	str	r3, [r4, #8]
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	071a      	lsls	r2, r3, #28
 8001380:	d501      	bpl.n	8001386 <__swbuf_r+0x20>
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	b943      	cbnz	r3, 8001398 <__swbuf_r+0x32>
 8001386:	4621      	mov	r1, r4
 8001388:	4628      	mov	r0, r5
 800138a:	f000 f82b 	bl	80013e4 <__swsetup_r>
 800138e:	b118      	cbz	r0, 8001398 <__swbuf_r+0x32>
 8001390:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001394:	4638      	mov	r0, r7
 8001396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	b2f6      	uxtb	r6, r6
 800139c:	6922      	ldr	r2, [r4, #16]
 800139e:	4637      	mov	r7, r6
 80013a0:	1a98      	subs	r0, r3, r2
 80013a2:	6963      	ldr	r3, [r4, #20]
 80013a4:	4283      	cmp	r3, r0
 80013a6:	dc05      	bgt.n	80013b4 <__swbuf_r+0x4e>
 80013a8:	4621      	mov	r1, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	f000 fa62 	bl	8001874 <_fflush_r>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1ed      	bne.n	8001390 <__swbuf_r+0x2a>
 80013b4:	68a3      	ldr	r3, [r4, #8]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	6022      	str	r2, [r4, #0]
 80013c0:	701e      	strb	r6, [r3, #0]
 80013c2:	1c43      	adds	r3, r0, #1
 80013c4:	6962      	ldr	r2, [r4, #20]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d004      	beq.n	80013d4 <__swbuf_r+0x6e>
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	07db      	lsls	r3, r3, #31
 80013ce:	d5e1      	bpl.n	8001394 <__swbuf_r+0x2e>
 80013d0:	2e0a      	cmp	r6, #10
 80013d2:	d1df      	bne.n	8001394 <__swbuf_r+0x2e>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 fa4c 	bl	8001874 <_fflush_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d0d9      	beq.n	8001394 <__swbuf_r+0x2e>
 80013e0:	e7d6      	b.n	8001390 <__swbuf_r+0x2a>
	...

080013e4 <__swsetup_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <__swsetup_r+0xa8>)
 80013e8:	4605      	mov	r5, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	b118      	cbz	r0, 80013f8 <__swsetup_r+0x14>
 80013f0:	6a03      	ldr	r3, [r0, #32]
 80013f2:	b90b      	cbnz	r3, 80013f8 <__swsetup_r+0x14>
 80013f4:	f7ff fee0 	bl	80011b8 <__sinit>
 80013f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fc:	0719      	lsls	r1, r3, #28
 80013fe:	d422      	bmi.n	8001446 <__swsetup_r+0x62>
 8001400:	06da      	lsls	r2, r3, #27
 8001402:	d407      	bmi.n	8001414 <__swsetup_r+0x30>
 8001404:	2209      	movs	r2, #9
 8001406:	602a      	str	r2, [r5, #0]
 8001408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	e033      	b.n	800147c <__swsetup_r+0x98>
 8001414:	0758      	lsls	r0, r3, #29
 8001416:	d512      	bpl.n	800143e <__swsetup_r+0x5a>
 8001418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800141a:	b141      	cbz	r1, 800142e <__swsetup_r+0x4a>
 800141c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001420:	4299      	cmp	r1, r3
 8001422:	d002      	beq.n	800142a <__swsetup_r+0x46>
 8001424:	4628      	mov	r0, r5
 8001426:	f000 f8a9 	bl	800157c <_free_r>
 800142a:	2300      	movs	r3, #0
 800142c:	6363      	str	r3, [r4, #52]	@ 0x34
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	6063      	str	r3, [r4, #4]
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	b94b      	cbnz	r3, 800145e <__swsetup_r+0x7a>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d003      	beq.n	800145e <__swsetup_r+0x7a>
 8001456:	4621      	mov	r1, r4
 8001458:	4628      	mov	r0, r5
 800145a:	f000 fa58 	bl	800190e <__smakebuf_r>
 800145e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001462:	f013 0201 	ands.w	r2, r3, #1
 8001466:	d00a      	beq.n	800147e <__swsetup_r+0x9a>
 8001468:	2200      	movs	r2, #0
 800146a:	60a2      	str	r2, [r4, #8]
 800146c:	6962      	ldr	r2, [r4, #20]
 800146e:	4252      	negs	r2, r2
 8001470:	61a2      	str	r2, [r4, #24]
 8001472:	6922      	ldr	r2, [r4, #16]
 8001474:	b942      	cbnz	r2, 8001488 <__swsetup_r+0xa4>
 8001476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800147a:	d1c5      	bne.n	8001408 <__swsetup_r+0x24>
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	0799      	lsls	r1, r3, #30
 8001480:	bf58      	it	pl
 8001482:	6962      	ldrpl	r2, [r4, #20]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	e7f4      	b.n	8001472 <__swsetup_r+0x8e>
 8001488:	2000      	movs	r0, #0
 800148a:	e7f7      	b.n	800147c <__swsetup_r+0x98>
 800148c:	20000010 	.word	0x20000010

08001490 <memset>:
 8001490:	4402      	add	r2, r0
 8001492:	4603      	mov	r3, r0
 8001494:	4293      	cmp	r3, r2
 8001496:	d100      	bne.n	800149a <memset+0xa>
 8001498:	4770      	bx	lr
 800149a:	f803 1b01 	strb.w	r1, [r3], #1
 800149e:	e7f9      	b.n	8001494 <memset+0x4>

080014a0 <_close_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	2300      	movs	r3, #0
 80014a4:	4d05      	ldr	r5, [pc, #20]	@ (80014bc <_close_r+0x1c>)
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	f000 fa9e 	bl	80019ec <_close>
 80014b0:	1c43      	adds	r3, r0, #1
 80014b2:	d102      	bne.n	80014ba <_close_r+0x1a>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	b103      	cbz	r3, 80014ba <_close_r+0x1a>
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	200001cc 	.word	0x200001cc

080014c0 <_lseek_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4604      	mov	r4, r0
 80014c4:	4d06      	ldr	r5, [pc, #24]	@ (80014e0 <_lseek_r+0x20>)
 80014c6:	4608      	mov	r0, r1
 80014c8:	4611      	mov	r1, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	602a      	str	r2, [r5, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f000 faa4 	bl	8001a1c <_lseek>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_lseek_r+0x1e>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_lseek_r+0x1e>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	200001cc 	.word	0x200001cc

080014e4 <_read_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
 80014e8:	4d06      	ldr	r5, [pc, #24]	@ (8001504 <_read_r+0x20>)
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	2200      	movs	r2, #0
 80014f0:	602a      	str	r2, [r5, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f000 fa9a 	bl	8001a2c <_read>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_read_r+0x1e>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_read_r+0x1e>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	200001cc 	.word	0x200001cc

08001508 <_write_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4604      	mov	r4, r0
 800150c:	4d06      	ldr	r5, [pc, #24]	@ (8001528 <_write_r+0x20>)
 800150e:	4608      	mov	r0, r1
 8001510:	4611      	mov	r1, r2
 8001512:	2200      	movs	r2, #0
 8001514:	602a      	str	r2, [r5, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f7ff fc2f 	bl	8000d7a <_write>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_write_r+0x1e>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_write_r+0x1e>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	200001cc 	.word	0x200001cc

0800152c <__libc_init_array>:
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	4d0d      	ldr	r5, [pc, #52]	@ (8001564 <__libc_init_array+0x38>)
 8001530:	2600      	movs	r6, #0
 8001532:	4c0d      	ldr	r4, [pc, #52]	@ (8001568 <__libc_init_array+0x3c>)
 8001534:	1b64      	subs	r4, r4, r5
 8001536:	10a4      	asrs	r4, r4, #2
 8001538:	42a6      	cmp	r6, r4
 800153a:	d109      	bne.n	8001550 <__libc_init_array+0x24>
 800153c:	4d0b      	ldr	r5, [pc, #44]	@ (800156c <__libc_init_array+0x40>)
 800153e:	2600      	movs	r6, #0
 8001540:	4c0b      	ldr	r4, [pc, #44]	@ (8001570 <__libc_init_array+0x44>)
 8001542:	f000 fa89 	bl	8001a58 <_init>
 8001546:	1b64      	subs	r4, r4, r5
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	42a6      	cmp	r6, r4
 800154c:	d105      	bne.n	800155a <__libc_init_array+0x2e>
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f855 3b04 	ldr.w	r3, [r5], #4
 8001554:	3601      	adds	r6, #1
 8001556:	4798      	blx	r3
 8001558:	e7ee      	b.n	8001538 <__libc_init_array+0xc>
 800155a:	f855 3b04 	ldr.w	r3, [r5], #4
 800155e:	3601      	adds	r6, #1
 8001560:	4798      	blx	r3
 8001562:	e7f2      	b.n	800154a <__libc_init_array+0x1e>
 8001564:	08001b11 	.word	0x08001b11
 8001568:	08001b11 	.word	0x08001b11
 800156c:	08001b14 	.word	0x08001b14
 8001570:	08001b18 	.word	0x08001b18

08001574 <__retarget_lock_init_recursive>:
 8001574:	4770      	bx	lr

08001576 <__retarget_lock_acquire_recursive>:
 8001576:	4770      	bx	lr

08001578 <__retarget_lock_release_recursive>:
 8001578:	4770      	bx	lr
	...

0800157c <_free_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4605      	mov	r5, r0
 8001580:	2900      	cmp	r1, #0
 8001582:	d041      	beq.n	8001608 <_free_r+0x8c>
 8001584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001588:	1f0c      	subs	r4, r1, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	bfb8      	it	lt
 800158e:	18e4      	addlt	r4, r4, r3
 8001590:	f000 f8e0 	bl	8001754 <__malloc_lock>
 8001594:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <_free_r+0x90>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	b933      	cbnz	r3, 80015a8 <_free_r+0x2c>
 800159a:	6063      	str	r3, [r4, #4]
 800159c:	6014      	str	r4, [r2, #0]
 800159e:	4628      	mov	r0, r5
 80015a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015a4:	f000 b8dc 	b.w	8001760 <__malloc_unlock>
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d908      	bls.n	80015be <_free_r+0x42>
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	1821      	adds	r1, r4, r0
 80015b0:	428b      	cmp	r3, r1
 80015b2:	bf01      	itttt	eq
 80015b4:	6819      	ldreq	r1, [r3, #0]
 80015b6:	685b      	ldreq	r3, [r3, #4]
 80015b8:	1809      	addeq	r1, r1, r0
 80015ba:	6021      	streq	r1, [r4, #0]
 80015bc:	e7ed      	b.n	800159a <_free_r+0x1e>
 80015be:	461a      	mov	r2, r3
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	b10b      	cbz	r3, 80015c8 <_free_r+0x4c>
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	d9fa      	bls.n	80015be <_free_r+0x42>
 80015c8:	6811      	ldr	r1, [r2, #0]
 80015ca:	1850      	adds	r0, r2, r1
 80015cc:	42a0      	cmp	r0, r4
 80015ce:	d10b      	bne.n	80015e8 <_free_r+0x6c>
 80015d0:	6820      	ldr	r0, [r4, #0]
 80015d2:	4401      	add	r1, r0
 80015d4:	1850      	adds	r0, r2, r1
 80015d6:	6011      	str	r1, [r2, #0]
 80015d8:	4283      	cmp	r3, r0
 80015da:	d1e0      	bne.n	800159e <_free_r+0x22>
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4408      	add	r0, r1
 80015e2:	6053      	str	r3, [r2, #4]
 80015e4:	6010      	str	r0, [r2, #0]
 80015e6:	e7da      	b.n	800159e <_free_r+0x22>
 80015e8:	d902      	bls.n	80015f0 <_free_r+0x74>
 80015ea:	230c      	movs	r3, #12
 80015ec:	602b      	str	r3, [r5, #0]
 80015ee:	e7d6      	b.n	800159e <_free_r+0x22>
 80015f0:	6820      	ldr	r0, [r4, #0]
 80015f2:	1821      	adds	r1, r4, r0
 80015f4:	428b      	cmp	r3, r1
 80015f6:	bf02      	ittt	eq
 80015f8:	6819      	ldreq	r1, [r3, #0]
 80015fa:	685b      	ldreq	r3, [r3, #4]
 80015fc:	1809      	addeq	r1, r1, r0
 80015fe:	6063      	str	r3, [r4, #4]
 8001600:	bf08      	it	eq
 8001602:	6021      	streq	r1, [r4, #0]
 8001604:	6054      	str	r4, [r2, #4]
 8001606:	e7ca      	b.n	800159e <_free_r+0x22>
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	200001d8 	.word	0x200001d8

08001610 <sbrk_aligned>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	4e0f      	ldr	r6, [pc, #60]	@ (8001650 <sbrk_aligned+0x40>)
 8001614:	460c      	mov	r4, r1
 8001616:	4605      	mov	r5, r0
 8001618:	6831      	ldr	r1, [r6, #0]
 800161a:	b911      	cbnz	r1, 8001622 <sbrk_aligned+0x12>
 800161c:	f000 f9d6 	bl	80019cc <_sbrk_r>
 8001620:	6030      	str	r0, [r6, #0]
 8001622:	4621      	mov	r1, r4
 8001624:	4628      	mov	r0, r5
 8001626:	f000 f9d1 	bl	80019cc <_sbrk_r>
 800162a:	1c43      	adds	r3, r0, #1
 800162c:	d103      	bne.n	8001636 <sbrk_aligned+0x26>
 800162e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001632:	4620      	mov	r0, r4
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	1cc4      	adds	r4, r0, #3
 8001638:	f024 0403 	bic.w	r4, r4, #3
 800163c:	42a0      	cmp	r0, r4
 800163e:	d0f8      	beq.n	8001632 <sbrk_aligned+0x22>
 8001640:	1a21      	subs	r1, r4, r0
 8001642:	4628      	mov	r0, r5
 8001644:	f000 f9c2 	bl	80019cc <_sbrk_r>
 8001648:	3001      	adds	r0, #1
 800164a:	d1f2      	bne.n	8001632 <sbrk_aligned+0x22>
 800164c:	e7ef      	b.n	800162e <sbrk_aligned+0x1e>
 800164e:	bf00      	nop
 8001650:	200001d4 	.word	0x200001d4

08001654 <_malloc_r>:
 8001654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001658:	1ccd      	adds	r5, r1, #3
 800165a:	4606      	mov	r6, r0
 800165c:	f025 0503 	bic.w	r5, r5, #3
 8001660:	3508      	adds	r5, #8
 8001662:	2d0c      	cmp	r5, #12
 8001664:	bf38      	it	cc
 8001666:	250c      	movcc	r5, #12
 8001668:	2d00      	cmp	r5, #0
 800166a:	db01      	blt.n	8001670 <_malloc_r+0x1c>
 800166c:	42a9      	cmp	r1, r5
 800166e:	d904      	bls.n	800167a <_malloc_r+0x26>
 8001670:	230c      	movs	r3, #12
 8001672:	6033      	str	r3, [r6, #0]
 8001674:	2000      	movs	r0, #0
 8001676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800167a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001750 <_malloc_r+0xfc>
 800167e:	f000 f869 	bl	8001754 <__malloc_lock>
 8001682:	f8d8 3000 	ldr.w	r3, [r8]
 8001686:	461c      	mov	r4, r3
 8001688:	bb44      	cbnz	r4, 80016dc <_malloc_r+0x88>
 800168a:	4629      	mov	r1, r5
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff ffbf 	bl	8001610 <sbrk_aligned>
 8001692:	1c43      	adds	r3, r0, #1
 8001694:	4604      	mov	r4, r0
 8001696:	d158      	bne.n	800174a <_malloc_r+0xf6>
 8001698:	f8d8 4000 	ldr.w	r4, [r8]
 800169c:	4627      	mov	r7, r4
 800169e:	2f00      	cmp	r7, #0
 80016a0:	d143      	bne.n	800172a <_malloc_r+0xd6>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d04b      	beq.n	800173e <_malloc_r+0xea>
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	4639      	mov	r1, r7
 80016aa:	4630      	mov	r0, r6
 80016ac:	eb04 0903 	add.w	r9, r4, r3
 80016b0:	f000 f98c 	bl	80019cc <_sbrk_r>
 80016b4:	4581      	cmp	r9, r0
 80016b6:	d142      	bne.n	800173e <_malloc_r+0xea>
 80016b8:	6821      	ldr	r1, [r4, #0]
 80016ba:	4630      	mov	r0, r6
 80016bc:	1a6d      	subs	r5, r5, r1
 80016be:	4629      	mov	r1, r5
 80016c0:	f7ff ffa6 	bl	8001610 <sbrk_aligned>
 80016c4:	3001      	adds	r0, #1
 80016c6:	d03a      	beq.n	800173e <_malloc_r+0xea>
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	442b      	add	r3, r5
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	f8d8 3000 	ldr.w	r3, [r8]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	bb62      	cbnz	r2, 8001730 <_malloc_r+0xdc>
 80016d6:	f8c8 7000 	str.w	r7, [r8]
 80016da:	e00f      	b.n	80016fc <_malloc_r+0xa8>
 80016dc:	6822      	ldr	r2, [r4, #0]
 80016de:	1b52      	subs	r2, r2, r5
 80016e0:	d420      	bmi.n	8001724 <_malloc_r+0xd0>
 80016e2:	2a0b      	cmp	r2, #11
 80016e4:	d917      	bls.n	8001716 <_malloc_r+0xc2>
 80016e6:	1961      	adds	r1, r4, r5
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	6025      	str	r5, [r4, #0]
 80016ec:	bf18      	it	ne
 80016ee:	6059      	strne	r1, [r3, #4]
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	bf08      	it	eq
 80016f4:	f8c8 1000 	streq.w	r1, [r8]
 80016f8:	5162      	str	r2, [r4, r5]
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	4630      	mov	r0, r6
 80016fe:	f000 f82f 	bl	8001760 <__malloc_unlock>
 8001702:	f104 000b 	add.w	r0, r4, #11
 8001706:	1d23      	adds	r3, r4, #4
 8001708:	f020 0007 	bic.w	r0, r0, #7
 800170c:	1ac2      	subs	r2, r0, r3
 800170e:	bf1c      	itt	ne
 8001710:	1a1b      	subne	r3, r3, r0
 8001712:	50a3      	strne	r3, [r4, r2]
 8001714:	e7af      	b.n	8001676 <_malloc_r+0x22>
 8001716:	6862      	ldr	r2, [r4, #4]
 8001718:	42a3      	cmp	r3, r4
 800171a:	bf0c      	ite	eq
 800171c:	f8c8 2000 	streq.w	r2, [r8]
 8001720:	605a      	strne	r2, [r3, #4]
 8001722:	e7eb      	b.n	80016fc <_malloc_r+0xa8>
 8001724:	4623      	mov	r3, r4
 8001726:	6864      	ldr	r4, [r4, #4]
 8001728:	e7ae      	b.n	8001688 <_malloc_r+0x34>
 800172a:	463c      	mov	r4, r7
 800172c:	687f      	ldr	r7, [r7, #4]
 800172e:	e7b6      	b.n	800169e <_malloc_r+0x4a>
 8001730:	461a      	mov	r2, r3
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	42a3      	cmp	r3, r4
 8001736:	d1fb      	bne.n	8001730 <_malloc_r+0xdc>
 8001738:	2300      	movs	r3, #0
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	e7de      	b.n	80016fc <_malloc_r+0xa8>
 800173e:	230c      	movs	r3, #12
 8001740:	4630      	mov	r0, r6
 8001742:	6033      	str	r3, [r6, #0]
 8001744:	f000 f80c 	bl	8001760 <__malloc_unlock>
 8001748:	e794      	b.n	8001674 <_malloc_r+0x20>
 800174a:	6005      	str	r5, [r0, #0]
 800174c:	e7d6      	b.n	80016fc <_malloc_r+0xa8>
 800174e:	bf00      	nop
 8001750:	200001d8 	.word	0x200001d8

08001754 <__malloc_lock>:
 8001754:	4801      	ldr	r0, [pc, #4]	@ (800175c <__malloc_lock+0x8>)
 8001756:	f7ff bf0e 	b.w	8001576 <__retarget_lock_acquire_recursive>
 800175a:	bf00      	nop
 800175c:	200001d0 	.word	0x200001d0

08001760 <__malloc_unlock>:
 8001760:	4801      	ldr	r0, [pc, #4]	@ (8001768 <__malloc_unlock+0x8>)
 8001762:	f7ff bf09 	b.w	8001578 <__retarget_lock_release_recursive>
 8001766:	bf00      	nop
 8001768:	200001d0 	.word	0x200001d0

0800176c <__sflush_r>:
 800176c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001774:	0716      	lsls	r6, r2, #28
 8001776:	4605      	mov	r5, r0
 8001778:	460c      	mov	r4, r1
 800177a:	d454      	bmi.n	8001826 <__sflush_r+0xba>
 800177c:	684b      	ldr	r3, [r1, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	dc02      	bgt.n	8001788 <__sflush_r+0x1c>
 8001782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	dd48      	ble.n	800181a <__sflush_r+0xae>
 8001788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800178a:	2e00      	cmp	r6, #0
 800178c:	d045      	beq.n	800181a <__sflush_r+0xae>
 800178e:	2300      	movs	r3, #0
 8001790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001794:	682f      	ldr	r7, [r5, #0]
 8001796:	6a21      	ldr	r1, [r4, #32]
 8001798:	602b      	str	r3, [r5, #0]
 800179a:	d030      	beq.n	80017fe <__sflush_r+0x92>
 800179c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800179e:	89a3      	ldrh	r3, [r4, #12]
 80017a0:	0759      	lsls	r1, r3, #29
 80017a2:	d505      	bpl.n	80017b0 <__sflush_r+0x44>
 80017a4:	6863      	ldr	r3, [r4, #4]
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017aa:	b10b      	cbz	r3, 80017b0 <__sflush_r+0x44>
 80017ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017ae:	1ad2      	subs	r2, r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017b4:	6a21      	ldr	r1, [r4, #32]
 80017b6:	4628      	mov	r0, r5
 80017b8:	47b0      	blx	r6
 80017ba:	1c43      	adds	r3, r0, #1
 80017bc:	89a3      	ldrh	r3, [r4, #12]
 80017be:	d106      	bne.n	80017ce <__sflush_r+0x62>
 80017c0:	6829      	ldr	r1, [r5, #0]
 80017c2:	291d      	cmp	r1, #29
 80017c4:	d82b      	bhi.n	800181e <__sflush_r+0xb2>
 80017c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001870 <__sflush_r+0x104>)
 80017c8:	410a      	asrs	r2, r1
 80017ca:	07d6      	lsls	r6, r2, #31
 80017cc:	d427      	bmi.n	800181e <__sflush_r+0xb2>
 80017ce:	2200      	movs	r2, #0
 80017d0:	04d9      	lsls	r1, r3, #19
 80017d2:	6062      	str	r2, [r4, #4]
 80017d4:	6922      	ldr	r2, [r4, #16]
 80017d6:	6022      	str	r2, [r4, #0]
 80017d8:	d504      	bpl.n	80017e4 <__sflush_r+0x78>
 80017da:	1c42      	adds	r2, r0, #1
 80017dc:	d101      	bne.n	80017e2 <__sflush_r+0x76>
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	b903      	cbnz	r3, 80017e4 <__sflush_r+0x78>
 80017e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80017e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017e6:	602f      	str	r7, [r5, #0]
 80017e8:	b1b9      	cbz	r1, 800181a <__sflush_r+0xae>
 80017ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d002      	beq.n	80017f8 <__sflush_r+0x8c>
 80017f2:	4628      	mov	r0, r5
 80017f4:	f7ff fec2 	bl	800157c <_free_r>
 80017f8:	2300      	movs	r3, #0
 80017fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80017fc:	e00d      	b.n	800181a <__sflush_r+0xae>
 80017fe:	2301      	movs	r3, #1
 8001800:	4628      	mov	r0, r5
 8001802:	47b0      	blx	r6
 8001804:	4602      	mov	r2, r0
 8001806:	1c50      	adds	r0, r2, #1
 8001808:	d1c9      	bne.n	800179e <__sflush_r+0x32>
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0c6      	beq.n	800179e <__sflush_r+0x32>
 8001810:	2b1d      	cmp	r3, #29
 8001812:	d001      	beq.n	8001818 <__sflush_r+0xac>
 8001814:	2b16      	cmp	r3, #22
 8001816:	d11d      	bne.n	8001854 <__sflush_r+0xe8>
 8001818:	602f      	str	r7, [r5, #0]
 800181a:	2000      	movs	r0, #0
 800181c:	e021      	b.n	8001862 <__sflush_r+0xf6>
 800181e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001822:	b21b      	sxth	r3, r3
 8001824:	e01a      	b.n	800185c <__sflush_r+0xf0>
 8001826:	690f      	ldr	r7, [r1, #16]
 8001828:	2f00      	cmp	r7, #0
 800182a:	d0f6      	beq.n	800181a <__sflush_r+0xae>
 800182c:	0793      	lsls	r3, r2, #30
 800182e:	680e      	ldr	r6, [r1, #0]
 8001830:	600f      	str	r7, [r1, #0]
 8001832:	bf0c      	ite	eq
 8001834:	694b      	ldreq	r3, [r1, #20]
 8001836:	2300      	movne	r3, #0
 8001838:	eba6 0807 	sub.w	r8, r6, r7
 800183c:	608b      	str	r3, [r1, #8]
 800183e:	f1b8 0f00 	cmp.w	r8, #0
 8001842:	ddea      	ble.n	800181a <__sflush_r+0xae>
 8001844:	4643      	mov	r3, r8
 8001846:	463a      	mov	r2, r7
 8001848:	6a21      	ldr	r1, [r4, #32]
 800184a:	4628      	mov	r0, r5
 800184c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800184e:	47b0      	blx	r6
 8001850:	2800      	cmp	r0, #0
 8001852:	dc08      	bgt.n	8001866 <__sflush_r+0xfa>
 8001854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001860:	81a3      	strh	r3, [r4, #12]
 8001862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001866:	4407      	add	r7, r0
 8001868:	eba8 0800 	sub.w	r8, r8, r0
 800186c:	e7e7      	b.n	800183e <__sflush_r+0xd2>
 800186e:	bf00      	nop
 8001870:	dfbffffe 	.word	0xdfbffffe

08001874 <_fflush_r>:
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	690b      	ldr	r3, [r1, #16]
 8001878:	4605      	mov	r5, r0
 800187a:	460c      	mov	r4, r1
 800187c:	b913      	cbnz	r3, 8001884 <_fflush_r+0x10>
 800187e:	2500      	movs	r5, #0
 8001880:	4628      	mov	r0, r5
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	b118      	cbz	r0, 800188e <_fflush_r+0x1a>
 8001886:	6a03      	ldr	r3, [r0, #32]
 8001888:	b90b      	cbnz	r3, 800188e <_fflush_r+0x1a>
 800188a:	f7ff fc95 	bl	80011b8 <__sinit>
 800188e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f3      	beq.n	800187e <_fflush_r+0xa>
 8001896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001898:	07d0      	lsls	r0, r2, #31
 800189a:	d404      	bmi.n	80018a6 <_fflush_r+0x32>
 800189c:	0599      	lsls	r1, r3, #22
 800189e:	d402      	bmi.n	80018a6 <_fflush_r+0x32>
 80018a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018a2:	f7ff fe68 	bl	8001576 <__retarget_lock_acquire_recursive>
 80018a6:	4628      	mov	r0, r5
 80018a8:	4621      	mov	r1, r4
 80018aa:	f7ff ff5f 	bl	800176c <__sflush_r>
 80018ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018b0:	4605      	mov	r5, r0
 80018b2:	07da      	lsls	r2, r3, #31
 80018b4:	d4e4      	bmi.n	8001880 <_fflush_r+0xc>
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	059b      	lsls	r3, r3, #22
 80018ba:	d4e1      	bmi.n	8001880 <_fflush_r+0xc>
 80018bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018be:	f7ff fe5b 	bl	8001578 <__retarget_lock_release_recursive>
 80018c2:	e7dd      	b.n	8001880 <_fflush_r+0xc>

080018c4 <__swhatbuf_r>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	460c      	mov	r4, r1
 80018c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018cc:	b096      	sub	sp, #88	@ 0x58
 80018ce:	4615      	mov	r5, r2
 80018d0:	2900      	cmp	r1, #0
 80018d2:	461e      	mov	r6, r3
 80018d4:	da0c      	bge.n	80018f0 <__swhatbuf_r+0x2c>
 80018d6:	89a3      	ldrh	r3, [r4, #12]
 80018d8:	2100      	movs	r1, #0
 80018da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018de:	bf14      	ite	ne
 80018e0:	2340      	movne	r3, #64	@ 0x40
 80018e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80018e6:	2000      	movs	r0, #0
 80018e8:	6031      	str	r1, [r6, #0]
 80018ea:	602b      	str	r3, [r5, #0]
 80018ec:	b016      	add	sp, #88	@ 0x58
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	466a      	mov	r2, sp
 80018f2:	f000 f849 	bl	8001988 <_fstat_r>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	dbed      	blt.n	80018d6 <__swhatbuf_r+0x12>
 80018fa:	9901      	ldr	r1, [sp, #4]
 80018fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001900:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001904:	4259      	negs	r1, r3
 8001906:	4159      	adcs	r1, r3
 8001908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800190c:	e7eb      	b.n	80018e6 <__swhatbuf_r+0x22>

0800190e <__smakebuf_r>:
 800190e:	898b      	ldrh	r3, [r1, #12]
 8001910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001912:	079d      	lsls	r5, r3, #30
 8001914:	4606      	mov	r6, r0
 8001916:	460c      	mov	r4, r1
 8001918:	d507      	bpl.n	800192a <__smakebuf_r+0x1c>
 800191a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800191e:	6023      	str	r3, [r4, #0]
 8001920:	6123      	str	r3, [r4, #16]
 8001922:	2301      	movs	r3, #1
 8001924:	6163      	str	r3, [r4, #20]
 8001926:	b003      	add	sp, #12
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	ab01      	add	r3, sp, #4
 800192c:	466a      	mov	r2, sp
 800192e:	f7ff ffc9 	bl	80018c4 <__swhatbuf_r>
 8001932:	9f00      	ldr	r7, [sp, #0]
 8001934:	4605      	mov	r5, r0
 8001936:	4630      	mov	r0, r6
 8001938:	4639      	mov	r1, r7
 800193a:	f7ff fe8b 	bl	8001654 <_malloc_r>
 800193e:	b948      	cbnz	r0, 8001954 <__smakebuf_r+0x46>
 8001940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001944:	059a      	lsls	r2, r3, #22
 8001946:	d4ee      	bmi.n	8001926 <__smakebuf_r+0x18>
 8001948:	f023 0303 	bic.w	r3, r3, #3
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	e7e2      	b.n	800191a <__smakebuf_r+0xc>
 8001954:	89a3      	ldrh	r3, [r4, #12]
 8001956:	6020      	str	r0, [r4, #0]
 8001958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001964:	b15b      	cbz	r3, 800197e <__smakebuf_r+0x70>
 8001966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800196a:	4630      	mov	r0, r6
 800196c:	f000 f81e 	bl	80019ac <_isatty_r>
 8001970:	b128      	cbz	r0, 800197e <__smakebuf_r+0x70>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	f023 0303 	bic.w	r3, r3, #3
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	81a3      	strh	r3, [r4, #12]
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	431d      	orrs	r5, r3
 8001982:	81a5      	strh	r5, [r4, #12]
 8001984:	e7cf      	b.n	8001926 <__smakebuf_r+0x18>
	...

08001988 <_fstat_r>:
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	2300      	movs	r3, #0
 800198c:	4d06      	ldr	r5, [pc, #24]	@ (80019a8 <_fstat_r+0x20>)
 800198e:	4604      	mov	r4, r0
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	f000 f831 	bl	80019fc <_fstat>
 800199a:	1c43      	adds	r3, r0, #1
 800199c:	d102      	bne.n	80019a4 <_fstat_r+0x1c>
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	b103      	cbz	r3, 80019a4 <_fstat_r+0x1c>
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
 80019a6:	bf00      	nop
 80019a8:	200001cc 	.word	0x200001cc

080019ac <_isatty_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	2300      	movs	r3, #0
 80019b0:	4d05      	ldr	r5, [pc, #20]	@ (80019c8 <_isatty_r+0x1c>)
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	602b      	str	r3, [r5, #0]
 80019b8:	f000 f828 	bl	8001a0c <_isatty>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_isatty_r+0x1a>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_isatty_r+0x1a>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	200001cc 	.word	0x200001cc

080019cc <_sbrk_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	2300      	movs	r3, #0
 80019d0:	4d05      	ldr	r5, [pc, #20]	@ (80019e8 <_sbrk_r+0x1c>)
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	602b      	str	r3, [r5, #0]
 80019d8:	f000 f830 	bl	8001a3c <_sbrk>
 80019dc:	1c43      	adds	r3, r0, #1
 80019de:	d102      	bne.n	80019e6 <_sbrk_r+0x1a>
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	b103      	cbz	r3, 80019e6 <_sbrk_r+0x1a>
 80019e4:	6023      	str	r3, [r4, #0]
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	200001cc 	.word	0x200001cc

080019ec <_close>:
 80019ec:	4b02      	ldr	r3, [pc, #8]	@ (80019f8 <_close+0xc>)
 80019ee:	2258      	movs	r2, #88	@ 0x58
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	4770      	bx	lr
 80019f8:	200001cc 	.word	0x200001cc

080019fc <_fstat>:
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <_fstat+0xc>)
 80019fe:	2258      	movs	r2, #88	@ 0x58
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	4770      	bx	lr
 8001a08:	200001cc 	.word	0x200001cc

08001a0c <_isatty>:
 8001a0c:	4b02      	ldr	r3, [pc, #8]	@ (8001a18 <_isatty+0xc>)
 8001a0e:	2258      	movs	r2, #88	@ 0x58
 8001a10:	2000      	movs	r0, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200001cc 	.word	0x200001cc

08001a1c <_lseek>:
 8001a1c:	4b02      	ldr	r3, [pc, #8]	@ (8001a28 <_lseek+0xc>)
 8001a1e:	2258      	movs	r2, #88	@ 0x58
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4770      	bx	lr
 8001a28:	200001cc 	.word	0x200001cc

08001a2c <_read>:
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <_read+0xc>)
 8001a2e:	2258      	movs	r2, #88	@ 0x58
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4770      	bx	lr
 8001a38:	200001cc 	.word	0x200001cc

08001a3c <_sbrk>:
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <_sbrk+0x14>)
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	b909      	cbnz	r1, 8001a48 <_sbrk+0xc>
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <_sbrk+0x18>)
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	4403      	add	r3, r0
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4770      	bx	lr
 8001a50:	200001dc 	.word	0x200001dc
 8001a54:	200001e0 	.word	0x200001e0

08001a58 <_init>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	bf00      	nop
 8001a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5e:	bc08      	pop	{r3}
 8001a60:	469e      	mov	lr, r3
 8001a62:	4770      	bx	lr

08001a64 <_fini>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr
